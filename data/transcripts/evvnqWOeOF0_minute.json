[
    {
        "start": 41.579,
        "text": "I can get her admitted it just wrapped around there this is the last talk of the semester I'll start up again the fall I am scheduling people for the sauce if anyone's interested in presenting of course let me know there are a few that are not regulars here so just a quick little spiel system tools and Technology seminar series it is a weekly seminar series discuss tools technologies methodologies recently developed currently in development or just ones that maybe someone else developed but are loose to researchers and we just "
    },
    {
        "start": 102.99,
        "text": "want so there's a sign-in sheet go around please do sign that just helps us justify the pizza and we want to be able to continue offering pizza each semester so that's really helpful for us so that introduces our speaker Chris Gates who is the lead bear informatics software developer for the bioinformatics school so it's Marci pointed out sorry can let me hear me at this bar can people see me the projector let me know so we're going to talk about Conda snake making Jupiter and how we can use those tools to do more reproducible research before I get down to the the weeds I wanted to take a minute and say that we're gonna take it just a few seconds and I want to learn a little bit about you because it's gonna help me shape and emphasize the the pieces of this if I understand whom I'm talking with then we'll talk a little bit about reproducibility in theory and "
    },
    {
        "start": 164.66,
        "text": "then we'll look at how those tools enable some reproducibility in research so a series of questions okay this is the kind of questions where you raise your hand if you to answer this how many people show of hands use the command line on so many regular basis a lot of people that's great okay how many people you are actively using one of Conda snake make or Jupiter okay I'm just curious Jupiter Conda snake make okay that's so how many here think they could name and describe more than three types of RNA okay okay that's good how people think they could contrast a bonferroni correction with the Benjamin II hush burg adjustment it's entitled just I'm a "
    },
    {
        "start": 225.23,
        "text": "not calling you today but people are how many people know what the DRI principle is okay good so the reason I'm doing this is that bioinformatics as we know is a team sport and everybody's I study from a different direction the hope is that we all land in the middle I am coming from a software engineering computer science background that's where my bias or my worldview is and at the University of Michigan buy-in from that core the core itself supports researchers inside and outside of the university we've done I joined the Corps in 20 13 and since that time we've done about eight hundred projects with researchers those projects can be very custom they can be very standard they can involve straightforward by automatic analysis custom bioinformatic analysis and sometimes even software development and I play a role in some of those things at various times I also help the Corps maintain its compute and storage environments that it can do that analysis um so before we get into our "
    },
    {
        "start": 288.11,
        "text": "ability let me just pose this question show of hands is reproducibility and most people are raising their hands right now that's between the right place so let me ask why could anybody give me a reason why we produce ability is good that's right okay it gives you better confidence that it's right agreed are there other reasons the reproducibility is good I I feel kind of links together with the drive principle right if somebody's already recruit or if they've already created the wheel and this is what they're saying this is how the wheels designed you can go on to make the car without having to recreate the wheel so as long as you can reproduce what they've done then you can build off of it it's a powerful idea the reproducibility is actually a form of encapsulation it's a way of chunking knowledge up so that you can operate on a more abstract level that's cool I didn't think of that but I like it other "
    },
    {
        "start": 352.01,
        "text": "people can check your work yeah so let me check your work these are good these are good so what I came up with is evidence of correctness which was I think basically what you were talking about in addition any others to check your work it really enables others to understand and extend your research it enables the reuse of the research but I think on a more profound level for a couple thousand years now we've made a distinction between what I think is true and what we accept a scientific truth and the idea of reproducibility is embedded in the idea of what actually constitutes scientific truth so reproducibility is actually really really important I think that it's very very important and it is also good so how many people now think the reaper disability is good did I get any better pick up anybody how many people now show of hands think that we are good at reproducibility let's say "
    },
    {
        "start": 414.83,
        "text": "the scientific community as of 2018 are we good at reproducibility maybe you didn't hear the question I'll ask once more just okay just for the record nobody actually raised their hands let's let's let me break that question down a little bit how many people think that okay how many people think that we're doing okay but we could be doing better how many how many people think that we're in some kind of a crisis of reproducibility a lot of people well I'm sorry that you feel that way unfortunately the you're not alone in feeling that way in fact in a nature study executed it's actually a survey in 2016 they asked 1,500 researchers is there reproducibility crisis over half said yes there's a significant crisis but 38% of them said yes there's a slight crisis how many times do you use that phrase "
    },
    {
        "start": 474.88,
        "text": "hey ace IPS all the time that's a slight crisis on the server and actually only only about three percent decided that we were doing okay now that's alarming but it is a study or it is this a survey from four researchers but then when you get into more robust studies psychologists created a consortium of 200 / or 200 researchers and they've looked at a hundred papers that were published in top-tier journals over the last seven years and they tried to replicate those results and what they found was that over the across those 100 studies they could only replicate 39 and those 39 were at a much smaller effect size okay so 39 percent is not very good but as we get closer to home it's starting to look better because in pharmacology the number of drugs that fail when they proceed from phase 1 to phase 2 is 18% sorry that's the number of drug that survived my mistake so 82% of what you start with are gonna "
    },
    {
        "start": 537.889,
        "text": "fail out the first time you actually try to recreate it that's not the same as reviews because moving phase we will talk about those distinctions in just a second family committing that cancer in cancer in 2012 Begley and Ellis tried to replicate 53 studies cancer studies they were able to replicate six of them so so it's okay it's gonna be okay it's important we think that we are not good at it we are probably right can we do better to answer that question I think we do have to get into a little bit more detail about how we think about what is reproducible so what we mean when we say reproducible Victorious Todd was they may be the victorious Donna's she actually spoke here several years ago and her whole focus of her research is on reproducibility she offers up this framework which I think is a useful framework it's not the only framework and in fact different domains define the word reproducible and replicable in "
    },
    {
        "start": 599.36,
        "text": "opposite ways but for today for this talk I'm going to define them here and we'll just have to use those words so empirical reproducibility is the idea that you are studying a reproducible phenomenon and you are observing it in a reproducible way I work in a dry lab I work with computers by the time things get to me they've been through a lot of wet lab protocols and in general I trust that what they're doing they're doing right and in general that's a good assumption for me if you are evolving new methods on your own you have to consider is what I'm doing actually a repeatable thing statistical reproducibility is has to do with statistical reproducibility has to do with how you choose to analyze the data and it is easier to understand statistical reproducibility by looking at its converse and the congress of statistical reproducibility what's the best example of having bad statistical reproduces what's the best example phrase that's "
    },
    {
        "start": 662.72,
        "text": "very often bandied about is p-value packing right and p-value hacking is a specific example of a an anti-pattern where you have an idea a research question and you think you know what the result is and so then you modulate your analyses until you get the result you thought it's very simple it's actually quite fun and it's easy to produce results and in fact I'm not going to do right now but if we have time at the end there's a website by 538 that lets you p-value hack and it's super fun but it's also really bad because of course that's not how science is supposed to work you're not supposed to jack the the analysis plan until you get the results you want or until you get the p-value that allows you to publish it doesn't work that's not reproducible so the final idea about reproducibility has been with computational reproducibility and when I first heard computational reproducibility I thought oh that's but that must be kind of a new thing I mean "
    },
    {
        "start": 724.91,
        "text": "given all this you know big data but the best explanation I have for computational reproducibility is this quote an article about computation results is advertising not scholarship the actual scholarship is the full software environment the code and the data that produced the result that's a timely message that was written in 1992 so they were struggling with computational reproducibility even then I can tell you in 1992 people were still publishing source code that you have to type in so that's a problem now if we tick this is our definition of computation reproducibility the ability to share and replicate the full software environment code and data that's what we have to do we have actually pretty good mechanisms for sharing data we have reasonably good mechanisms for encode the ability to share the software environment we actually have good mechanisms now but there are a little bit more recent to the game this is "
    },
    {
        "start": 786.74,
        "text": "actually where Conda helps and this is where we start to get down into the weeds Conda is a way of managing and sharing compute environments with other researchers so before we dive deep down into Conda I should mention that I am a Condit enthusiast I am NOT a Conda expert okay so if if you have questions about Conda I would love to hear them but I will tell you about our experience with Conda at the core so how did reproducibility because it enables you to manage and share your compute environment with other researchers kind of it so it's a package and environment management system what does that mean well if you can't rewind back to 1992 when that quote previous quote was mentioned the easiest way you could actually share your computer environment was if you actually gave somebody your computer right and you could do that that would be a simple easy way to solve this problem it's just put a line in the publication and your paper to say a completely fully "
    },
    {
        "start": 849.29,
        "text": "installed laptop will be provided upon request and it just doesn't scale well it's the only problem but the idea is perfect you just want to mail somebody a little computer that has all the data and it has all the software and it's already installed that's what you want to do and that's basically what Conda lets you do Conda has is connected with these repositories that understand the relationships of software and their dependencies and it enables you to create configure and share the environments which are like the little laptops inside of your computer so let's look at how this works it's kind of in theory is a very simple thing there's only a few commands to manage this so the first command that you typically execute when you're creating environment is the conduct create command and all the kind of commands start with condoms so you issues a create command and you give it a name what it does is it says okay well I'm going to reserve a small location somewhere typically inside your home "
    },
    {
        "start": 909.5,
        "text": "directory and that's going to be where this little laptop lives I'm going to stop saying the words little laptop and start substituting that with your compute environment okay so that's where your computing environment lives lives inside of this directory which is inside of your home directory and it tells you if you want to use that little laptop sorry you want to use that environment then you have to take this other thing you have to source activate that environment now the next thing I type is the source activate and the only change is that my command prompt now has been prefixed with the name of that environment so now I'm in that little laptop ok everything is great the look problem is there's nothing there ok so to make the useful environment I actually have just started selling software how many people use pip this is a little bit like pip so I said conda installed cheaper because I've heard the jupiter's kind of cool thing I don't know what it's about but I install it and the first thing it does is it says ok I'm gonna try to figure out if you want to end up with Jupiter then what do I have already "
    },
    {
        "start": 970.49,
        "text": "installed and what do I need to get in terms of dependencies to make Jupiter work in this new environment so it solves it creates a plan and it tells you what it's going to do then it tells you what it's going to download and it turns out it's gonna have to download like 82 megabytes of stuff do this and then it tells you here all the packages that I'm gonna have to go get and install to make the jupiter thing that you ask for work and then it downloads them and extracts them and installs them and then finally at the end it ends with executing transaction done which is its fancy way of saying i think it works then you could ask well if i were to type jupiter which jupiter would actually be executed it would say well it's the jupiter that lives inside of that environment that little sorry the environment stop saying it so that's installing a package that kannan knows about it turns out that conda to figure out whether to figure out how to install it it has to communicate with something called a repository and the repository has the recipe of how to install that different "
    },
    {
        "start": 1031.48,
        "text": "software in this case instead of installing it I'm just asking it hey could you tell me more about the snake make tool because I've heard that's kind of cool too in this case it's giving me a more complex some more complex feedback and saying well I couldn't actually find that package when I looked in my channels and the channels are like the channels so funny look at me like the channels on your TV sorry I left there there like the channels on your TV they are the the places the the repositories that it knows about and it says I looked in the channels that I know about I couldn't find anything called snake mate but if you really think it's out there you should go you should go to this website and then try to see if you can find it there anaconda org so I go to that website my type and snake make any hit search and it comes back sure enough yes I do know about something called snake mate I the version I have is 4.80 and it's in the bio Conda Channel okay so this is just another repository that has a different set of recipes to install a "
    },
    {
        "start": 1093.62,
        "text": "different kind of software bio Conda is a repository that's dedicated to bioinformatics tools so now I could say well now if I said kind of search but look in the bio Conda channel for snake make 48.0 then it'll show me well I know about two versions and one of them is optimized for Python 3 5 and other ones optimized for Python 3 6 that's great now I can say Conda install and I can give it any number of channels give it what I want to install and then it goes through a ton of feedback trying to assemble all of the dependencies and link everything up after we just finally says yes it works and I ask which snake make did you just install it or rather where is the snake make and it's in mine it's in my little environment obviously the certain point it's it's handy to know what have I installed what can I run what are the versions of these packages and for this you just say Conda list and it lists all of the packages and the metadata about what versions they are and where they came from it's "
    },
    {
        "start": 1155.51,
        "text": "also really nice every once in a while you say to yourself everything worked fine until I installed that one thing and now nothing works right well Conda actually keeps a list of revisions so you can actually say if you say list revisions then this will say well this is for revision zero that's when you first created the environment and revision one is when you install Jupiter and revision 2 is when you installed snake making within each of these revisions it lists all of the packages that he'd either added or it modified and you could at any point say uh I've screwed it up utterly I just want to go back to her one and just and that's very easy to you say revert to revision one you can go on from there we created a little environment for this tools in tech which I am calling reproducibility tools in tech and but it's common to create many environments there's seven environments listed here and you can see that with that command at bulk on kind of info ends in the seven environments like I "
    },
    {
        "start": 1216.5,
        "text": "create different environments for different reasons one of the reasons is that if I'm doing an analysis and I want to encapsulate all the software that I'm doing for the analysis I'll create an environment and then I install all the software that I need for that analysis into the environment then I can always reconstitute it or I can always share it and it's insulated from all the other environments another reason that I do it you can see down here a little bit lower [Music] don't know if I have to test software against different versions which I sometimes have to do I can create a build that has Python 3:6 with different versions of Python and so I create an independent library and that again is insulating all of these dependencies and making it much easier to manage but of course the point of this what the point of this is it will actually share these environments it's nice up to this point it is very nice and it would be worthwhile that was where it stopped but ultimately I do want to be able to reproduce my research so with a few "
    },
    {
        "start": 1276.65,
        "text": "simple commands I can export this environment and that exports basically a text file that describes how to reconstitute this environment but then I take that text file which in this case is called environment die panel and I email it to somebody or I put on github or whatever and they download it then they say Conda environment create and now they've got my compute environment that's really nice that's really nice it is hard to reproduce other people's compute environments if you don't have some kind of a solution and if it's hard it really I can tell you materially interferes with your use and understanding of their research um kondeh can be I'm gonna say nuanced 80% of the time it's wonderful it does exactly what you wanted to do 20% of the time it's doing something that's probably very defensible and makes sense for example I try to install snake make "
    },
    {
        "start": 1338.85,
        "text": "and I don't include all the channels it doesn't always install the version that I expect and there's always reasons but you just have to pay attention and in fairness the kind of package management is a really hard problem it's a hard problem ask somebody who installs packages a lot actually don't ask them they're very angry people but it is hard and in secondo is doing a hard thing and I think it's doing it reasonably well the other problem is that you lose the excuse you start using this intensively you don't want to ask other people to install your packages you started sawing all your own packages and then the problem is is that you can't blame anybody else for all the problems you become the problem you're like oh I gotta fix this and I got to fix this repository and I got to do a pull request because this recipe is wrong but having said all of that kind of really does enable you to manage and share your computer environment I think it does a great job is not the only game in town there's a lot of good solutions for sharing your computer environment there are heavyweight solutions that share an entire virtual machine there are lighter weight solutions that share a container "
    },
    {
        "start": 1399.75,
        "text": "there are software solutions there are language and OS specific solutions and what do you know you can actually use those in combination and in fact I think well there's colleagues at the epigenomic core that have made really good use of Conda and packrat together and I should mention that we were looking at Python software to install but Conda was actually invented because there were things outside at Python that they needed to be able to install more gracefully so Conda works with Python and R and Ruby and a bunch of other language environments all that said it is a little bit biased towards Python so if you are using a lot of Python Conda will help you if you're using a lot of our condo will probably helpful help you but you got to watch it so okay that's condom let's talk about sleep me I'm sorry I should have mentioned if you have a question the right time ask the "
    },
    {
        "start": 1460.26,
        "text": "question is right when it occurs to you I may not answer it right then as I've already demonstrated with Jeff but ask it when you have the question we're covering a lot of material and recovered it fast you have an example of using the Yambol file to read me this of using the mo file to actually recreate the environment and these little ellipses it's not gonna be twice kind of super check yeah yes yes so if I write you know my own tools for example that aren't already in a repository and I want to make those available to other people so they can reproduce what I have done how hard is it to create my own repo it's not hard and in fact you probably wouldn't create your own repo you could do it and it's very easy to create a repo locally and that's something that you can do if you're building a lot of weird pipelines but if you build a tool and you want to share it the move that I would probably recommend is the action loaded by oh Conda and that's very easy to do "
    },
    {
        "start": 1522.15,
        "text": "mechanically and you the truth of matter is we had a tool that we built somebody came in from a person outside of the you said oh I really want this in really want this in bio Conda is it okay if I put this in bio , we're like yeah sure Monica knock yourself out and it's just a really simple recipe that you had to bio Conda and then you add then you a pull request to the bio count of people so that they know you're actually doing a bio kinda thing yes there's a lot of things told package directly from github let's say the you know the latest version isn't the channel but there are some updates that are not published in the channel the other and just want to do kind of let people allows you to do keep the protocol and more specific right so the question is like can you install can go outside of kana to install like the way you would've solved it yeah the answer is yes you can kondeh and in fact if you do with pip Conda is close enough to pit they're close enough in their relations that when you capture the environment it'll actually capture "
    },
    {
        "start": 1583.47,
        "text": "the other things that are installed in that environment via pit so that's a good thing the more for the first thing you get away from the Condit install it will allow you install it in an environment you have to be careful whether it's capturing that when you export the environment yeah cool okay so I mentioned what I talked about what I do meet the core I might have mentioned but I'll reiterate so part of what we're trying to do with the quartz we're trying to identify and analyze patterns in DNA and RNA and typically the way we do that is that we chain together a series of bioinformatics tools so we can transform raw genomic data into some meaningful biological information now oftentimes when we do that we automate that as a scientific data workflow and over the last few years we've been using snake make more and more because snake make is a framework that makes it easier to build and execute good data workflows before I dive right into the belly of the beast I want to consider a "
    },
    {
        "start": 1643.65,
        "text": "traditional data workflow and I could dazzle you with by automatic transforms but I'm not going to do that today are we in exam period right now good okay I'm not gonna I'm not gonna I'm not going to tax those resources we're gonna keep it simple all we're gonna do is we're gonna transform this raw chicken into fried chicken and we're gonna do it very simply we're not gonna use snake meat we can use a Bosch file the Bosch file called Fried Chicken dot Sh and there's three steps you gotta marinate the chicken with the buttermilk then you gotta bread that then you gotta fry that this is a very simple workflow it accepts one input which is raw chicken and emits one output which is fried chicken okay got that yeah that memorized good so how would snake make approach this snake make instead of a Bosch trick it uses something called a snake file which is a text file that defines the workflow now it defines that with a simple markup language that defines rules where each rule each rule describes how to create an output file "
    },
    {
        "start": 1704.01,
        "text": "from an input file now so far this looks like a wordy version of our bash file but we're not done because in addition to the things that transform in inputs to outputs it also for each rule you have to declare the all of the inputs and all the output files in this way the snake file defines the dependencies for all the input files and all the output files across the entire workflow that's what the snake file does and that pattern of being able to articulate the inputs and outputs for each rule is powerful pattern with that under our belts we can talk about snake make snake make is a program that interprets the snake file against the file system and then runs rules as necessary to create your new output files that's all it does on the right when you invoke snake mate snake make again read your snake file and it says oh you want fried chicken "
    },
    {
        "start": 1764.69,
        "text": "okay well to get Fried Chicken I have to execute the fry rule but before that I have to execute the bread rule and before that I have to execute the marinate rule importantly when you execute snake make you never say well I want you to do this first and then I want you to do this second and then if that works I want you to do this third you never tell it what to do you tell it what you want and it figures out what to do that declarative pattern is very very powerful and it has some very very nice consequences the first consequence is that it makes it very easy to extend snake making to new inputs so if you want fried chicken that's great but maybe you're a little health-conscious you want some fried fish maybe that's not committed a big improvement yes how is this different from any fun I promise you I will answer that if you ask it again but not yet before we leave snake make I would tell you so you can extend this with new inputs so now I can get a lemon herb fried fish and I don't have to change I don't have to change the "
    },
    {
        "start": 1824.97,
        "text": "snake file drastically I just have to introduce a couple of wildcards the data flow is very very similar it's not a big deal another nice consequence is that snake make is durable and by durable I mean that it crashes well now snake me I've never gotten snake meat to crash and I've tried but I run bioinformatic tools and the funny thing about behind from that tools is they crash and watch the inputs are weird or the compute environments not optimal and it crashes and that's just the way the world but and snake meat crashes it knows what the output is supposed to be and it dutifully says well I didn't finish this summon I'm gonna remove it it cleans up after itself so there's not all these weird half-baked files lying around so either a rule ran and it succeeded or it was as if it never ran at all that's really nice because then when you have to restart a crash job after you fix the problem you just issue snake make command again and snake make says oh well I don't have to recreate this because it's already there and it starts exactly where it left off that's really really nice in fact snake make is so intelligent "
    },
    {
        "start": 1887.16,
        "text": "about this you can ask at any point what do you have left to do and it'll tell you this diagram was actually generated in snake me saying please show me with a visualization what's left snake lake is computationally efficient if we think about they could not remove things and sometimes those clues yes but you have to think about what you want in advance and and there's ways to do that absolutely there's clues exactly right if you wanted some forensic analysis of what went wrong absolutely yeah absolutely snake is computationally efficient if you think about a traditional Bosch file and let's imagine that it takes a series of inputs will call input a and that there's four tasks and each of those tasks has an execution time which is its height in each of those tasks has a resource footprint which is its width so the full run for this entire workflow is the son of the heights but the resources I have to commit for that run I have to do the max of the width now in the diagram that makes white space in your life that makes waste that's wasted time "
    },
    {
        "start": 1947.34,
        "text": "let's wait to compute resources and this problem gets worse if you think that you're gonna have to run this on more than one input now maybe you could paralyze this by running all those things at the same time but you're still all that waste so they make knows what's in put and it knows what's output and so it's very easy to paralyze the snake make runs so it's gonna finish faster because it's running in parallel and better than that it knows what the resource constraints are in the individual tasks so you don't have a lot of waste so it finishes faster it's less committed compute resources which could mean less money snake it's portable this is how I write on the workstation I want to see how I run it on flux like that let's see I write on slurm at that we'll see I Ryan kubernetes orchestration like that let's see I Ryan Windows Mac OS let's see it's compliant with docker at singularity and it's complying with condom so this is really nice it's nice to build something that "
    },
    {
        "start": 2008.9,
        "text": "you can actually share so the nice thing let's make make is that I can focus on the data now on a traditional workflow of course when you think about a workflow you're thinking about the data but you also have to think well how am I going to abstract out the parameter so that I can run it with different inputs how am I gonna build in the intelligence so that it doesn't rerun things that it doesn't need to and how am I going to make sure that it works correctly on the different computer environments and how am I going to articulate the different requirements for each of the tasks and yes I could build all this in but then I'd be building a workflow management system I wouldn't be building a dataflow I would rather just focus on the data and then attend to all these other concerns and as necessary it's they can make lets me do that so these examples looked at super trivial data flows but snake make it's not constrained to super trivial workflows and these examples focus on a shell transform but you can also just drop in Python right in that slot or even are right in that slot um "
    },
    {
        "start": 2070.629,
        "text": "you asked a question why is this different than make right how many people use make is there different people using that's one two it's got a much more intuitive wild carding than make so if you have to parameterize the inputs it's much easier to do that three it's easy to declare multiple outputs in snake make which is hard to do and make and four make doesn't have a place for submitting jobs to clusters so the parallelization and the portability is a lot better but it's inspired by make I mean it's sneaking so wow you guys for each rule I can declare multiple outputs which is harder to do and make them isn't same thing yeah yeah there's nothing wrong to make it makes doing your job do it makes makes a good tool yes I cannot comment on CW Rose anybody "
    },
    {
        "start": 2138.52,
        "text": "else does anybody else using CW l yeah I'll tell you this snake make is not the only workflow management system like there's a lot and I think there's a lot of really good ones I like snake make because it's it kind of fits our needs but yeah yeah galaxies how many people use galaxy no not a galaxy campus I guess galaxies a good tool if you see it okay yeah okay let's see okay people used to period that's over here how many people know what literate programming is oh you just "
    },
    {
        "start": 2200.17,
        "text": "everybody has raised your hand it's in Jupiter raise your hand again who uses Jupiter you know what literate brush so literate programming is an idea that was this phrase was coined by Donald Knuth in 1984 and he wrote a book about it but the boils down to instead of imagining that our main task is just instruct a computer what to do let's concentrate rather unexplained to human beings what we want the computer to do this was the idea that like anybody can make a computer do what you want it's harder to make a person understand that you should be writing programs for humans not computers and his how the kernel of his idea was that if we could combine not just a code but also the narrative that explained the code and the data and the quantitative results and the visualization into the same artifact into the same thing that we would share then all of these things become easier to use and easier to understand this is "
    },
    {
        "start": 2262.66,
        "text": "great this is a great idea and a super important idea in Mathematica and MATLAB picked this up and they said we're gonna do it we're gonna do it with a notebook cool scientific notebook how many people use MATLAB all right all right no shame in it there's no shame in it and and yeah and and they pick that up are with the distance ed oh okay all right we're not gonna do a notebook but we are going to support this idea and we're gonna do it through sweep and then we're going to do it through our markdown and juber came along between 2001 and 2010 so it's kind of a new kid on the block in terms of literate programming and the notebook idiom but it's got the benefit of hindsight so and I so want to show this to you but I'm so afraid to change my screen yes okay may not get it back does the problem all right all right see what happens I think "
    },
    {
        "start": 2331.42,
        "text": "I'm gonna have to do this okay it's gonna work we're sorry sorry okay all right so I am going to this way okay so it's gonna launch a notebook oops I launched it up does it matter it's harder to type this way I'll tell you that okay all right so the first thing you see is this big awful screen that actually is just a listing of the files that are in the directory I'm gonna skip over this it's not that exciting once you know so get used to it I'm going to start it over okay I am in Jupiter a notebook fantastic and in Jupiter notebook the way this is configured I can execute arbitrary Python commands arbitrary Python statements so let me if I have a tango so I'm just gonna sign an array to the value of X I'm going to execute that voila amazing I could look at what X is that would be cheating but "
    },
    {
        "start": 2393.01,
        "text": "do it and I'll just do one of my fancy one and then we'll take a look we'll talk about what's actually happening here okay so in the notebook you have this concept of cells and the cells have all cells have inputs and some cells have inputs and outputs and this cell there's no output because there wasn't really anything returned from the command this one I'm saying well I just want to know what X is so it's gonna print the output the cells can have more than one line and in this case I don't know what is that Jeff this is comprehension this is compliment of me so I do a comprehension that assigns a new variable and then yields it out so this couplet that's kind of called responsive I do this you show me that this is very there's a very familiar pattern right because this is the command line this is what the command line does amazing we've invented a command line but it's not "
    },
    {
        "start": 2456.19,
        "text": "just a command line an important idea is that I can come up here I can say well the truth of the matter is I kind of know what X is I don't need to see it because I just signed it so tell me what I'm just gonna combine these I have just rewritten history that's harder to do in a command-line and the important thing is in a command line the best thing you can do is share your history the history of your commands but with this I can share this document this thing this Jupiter notebook and they have all of my inputs they have all of my outputs and I can range this so that it makes the most sense I show you an extended example of this I'm going to come back to dare I "
    },
    {
        "start": 2519.79,
        "text": "this is only a slightly more complex version of what we just saw but here I do a little bit of that and this is an interesting cell because this cell is not a Python cell this is a markdown so you think I'm markdown so I can use very very primitive markdown language to introduce some simple formatting that enables me to create that narrative it explains what you're looking at why it's important if you how many people use low-tech and people use latex you want and unlike a typical command and sorry command line I can embed graphics and visualizations in here and this is again kind of a toy example but let me give you a slightly more more robust example "
    },
    {
        "start": 2581.6,
        "text": "this was a this was a homework assignment that I did a couple of years ago this is a clustering example but the point is that this combination of code and results and visualizations they really make a more useful shareable artifact this is what I submitted as my homework well I mean I've turned it into a PDF which is very easy to do so that idea that you're actually you're working with a more sorry how do I get how do I now how do I look that darydary do this okay that work so I'm sharing a more valuable artifact that combines it's it's it's like painting in color after you've been using black and white another important aspect of how Jupiter does is it partitions the beauty or the user interface with the brains which it "
    },
    {
        "start": 2643.54,
        "text": "calls the kernel so on one side like when you're interacting with it you're interacting in a web browser and you're typing things up and you're in the cell down here and then you're and then those things are read by the kernel executed by the kernel and the results are printed by the kernel which are sent back out and then just lose that's what it feels like a command-line that's exactly what command lines do all the time they just do this loop but because this is split and especially between the brains and the beauty it enables me to make some interesting choices I can run Jupiter all on my workstation and then attach to a server that has data it's far away but maybe that doesn't make sense maybe if the data processing is really intensive maybe it makes sense for me to run the kernel right next to the data and then just have this web app very thin client very efficient the other thing that's really nice about this is that the notebook interface is really well defined and the messaging protocol is really well defined and as "
    },
    {
        "start": 2705.13,
        "text": "soon as they did those definitions people realized this is not just a Python thing this is a you can do anything that supports a command line with this so this is the our kernel and this is in our notebook the our notebook has that same in outfield but instead of Python it's all are running against an our kernel just the way you do in our studio if that's what to do it and in fact it supports like 100 kernels Jupiter the word Jupiter is for Julia Python and are those were the first three kernels that they built Jupiter Jupiter lab is out there how many hey how many people use do burlap alright Jupiter lab is the future of Jupiter it may not be the presence of Jupiter Jupiter's sweet I love Jupiter Jupiter lab is in terms of the look and feel it's a little bit improved I don't know that I like it that much more but importantly there was a problem with the "
    },
    {
        "start": 2766.27,
        "text": "architecture when they conceived of Jupiter that prevented people from building really portable widgets and they fixed that with Jupiter lab so Jupiter lab and Juber lab has zillion committers so if you haven't switched Jupiter lab you might consider switching if you haven't started Jupiter at all you should start with Jupiter lab if you're really deep into Jupiter and you use some really esoteric JavaScript stick with the notebook and incidentally the notebook format hasn't changed when it went to jeepers lab so they worked exactly the same in Jupiter and Jupiter lab the Juber ecosystem is a little confusing because there's a lot of words but it started off as ipython then it became Jupiter and now it's Jupiter lab where the Jupiter lab is very fresh there's a thing called Jupiter hub which makes it easy to create a multi-user Jupiter notebook so that zillions of people can use Jupiter all at once that's something you'd use for like a class or even an institution Jupiter "
    },
    {
        "start": 2826.63,
        "text": "notebooks render pretty well on git they don't render perfectly all the time especially if you use a lot of weird interactive JavaScript but if you just go to a git page and you look at it Jupiter notebook it's gonna look right there's also a thing called binder that enables you to create a Jupiter notebook and then publish it and it captures all those dependencies in the container so it's really easy to share it's also really easy to see other people's notebooks Jupiter is not a software IDE and it's not a very powerful text editor so I'm keeping Adam and I'm keeping eclipse on my machine but it is really nice okay last thoughts you know the problem is this is a lot of words so I'll just say these are tools what we've talked about up to this point er tools and tools can enable better behavior behavior is the key we have to be better about sharing the tools enable us to share in a reasonably safe productive way but this is what we have to do to make reproducible research we have to share "
    },
    {
        "start": 2889.34,
        "text": "our compute environments we have to share our code we have to share our data and it would be and there are often reasons why we can't share things and I understand that not sharing you have to share everything but it would be nice if the default position was let's share this unless we can't rather than why should we share this so does anybody know what the Joel test is Joel just was this test that this guy came up with the see whether or not he wanted to work for an organization a software organization he'd ask all these questions yes or no questions and then he'd figure out whether or not I wanted to work there and somewhere along the line somebody realized well that's kind of a snarky way to be but these are interesting questions and they provoke good discussion I present to you these questions as a way to think about reproducibility whether or not our actions are aligned with our espoused values in terms of reproducible I'm going to go through them all right I "
    },
    {
        "start": 2949.76,
        "text": "think we've all established that reproducibility is good and coming from a software background I think of reproducibility as to research as usability is to software yeah it's harder it requires more thought you have to pay a little bit more upfront but you're gonna give a better researcher experience it's a weird phrase you don't through those words together it's a better researcher experience better user experience you know what the thing about it is when it's easier to use another person's research or understand another person's research you get more use you get more citations and they will extend your research this is a good thing with apologies to how for North white had research advances by extending the number of important which we can perform without thinking about them the tools that I've gone over today enable us to stop thinking about some of those mechanical operations so we can focus on more important more profound questions about our research a lot of interesting information if if "
    },
    {
        "start": 3011.02,
        "text": "this was boring don't go here you liked it you should go here and I just call out software carpentry is a group I'm a member of this group I see a couple people Scott I see Xena I saw Stephanie you guys have a training coming up Monday Tuesday Monday and Tuesday yeah if you're interested software carpentry if you're interested in using computers more effectively in your research you should follow those two people Xena and Scott with that I'd like to thank the biokinetic Corps and also the Kretzer lab for indulging me one is first in humans so all the experiments before have not are not perfectly predict "
    },
    {
        "start": 3072.9,
        "text": "what's gonna happen me pretty human absolutely I'll say though that I think what that is for me is emblematic of the importance of defying the what do you mean by reproducibility when you start having that conversation with anybody because it is the literal truth but if you'd if you walk over and you talk to a computer scientist and you ask them what is what is a replicated study and what does it reproduce study and then you cross over and you ask a biologist what does a replicate especially lives reproduce study they will give you exactly opposite answers they're very precise but they're exactly opposite so yes definitely define in terms of course IH have courage in their movement from the attack to the cloud actually want to discourage study specific insertion specific it accordingly yes once again I welcome visitors and they defined the digital object on the cloud you don't define works there's "
    },
    {
        "start": 3136.93,
        "text": "still a challenge not a past constituent to choose from but you can call this the collection and call it an absolute or finding mission but there's the community agreed standards on which is better but it works like yeah many people are thinking is to somehow develop for rating system so that's the master workflow gets a more people contributed to it or gets voted up and make more efficient more literate so that it's a combination of multiple times computer but have fun yourself yeah and I'll mention that this is a reproducible tech stack is not the reproducible tech stack this is obviously there are alternatives to all "
    },
    {
        "start": 3197.11,
        "text": "these tools and there's not a lot of conversions yet so I would welcome convergence it would frankly make my job easier everybody was speaking the same language [Music] [Music] "
    }
]