[
    {
        "start": 1.599,
        "text": "okay hello everyone uh welcome to bioinformatics 527 for fall 2020. um this is going to be the first in a two-part intro to r series uh that we are putting out ahead of the semester and if you're watching this that means that you are that you don't have experience with our programming coming into the class or perhaps that you don't have any programming experience and that is fantastic actually because you are the target audience for this course so um the idea with 527 uh is to provide an introduction to bioinformatics and uh i personally want it to be a stepping stone for students who maybe don't have that computational background yet but want to incorporate that into their research and into their careers going forward so i hope this is sort of a jumping off point and so well why don't we just do the r programming intro as part of the actual "
    },
    {
        "start": 62.64,
        "text": "course during the fall well the idea here is that we want to get everybody some of the basics of our programming under their belt so that we can really hit the ground running during the fall and uh and get the most out of the lab sessions that we can we also of course have a really wide variety of students taking the course and there are definitely some students with more computational training who have a reason to want to take the course and i don't want to exclude them from the class so this intro will be sort of putting everybody more on an equal footing it'll give us all a point of reference to start from when we begin the semester so so we've got a video here today you know i think it'll be probably a little over an hour if i had to guess so obviously feel free to do it in chunks whatever is digestible for you or fits into your schedule and and then there'll be another video that i'll be putting out to go along with this one so so yeah so "
    },
    {
        "start": 123.52,
        "text": "before we jump into any programming let's take a look at some of the history of r uh well actually first let's go ahead and if you haven't already grab these two files i'll be sending out these links so you don't have to actually type that in with a welcome message to the class so hopefully you've already gotten that and can download these files so we'll be using these a little bit at the end of this session today i think yeah we should get to these and then again in the second session yeah we'll see definitely for the second section and i want to start with some of the history of r i think it's uh it has an interesting background and some history to it so uh before r there was actually a programming language called s and so s was a programming language that was developed in the 1970s at a place called bell labs which is it was sort of this amazing think tank where they hired brilliant people and let those people "
    },
    {
        "start": 183.84,
        "text": "work on what interested at them and it was uh amazingly productive uh and fruitful i believe there were nine nobel prizes that were awarded for work done at bell labs so it was just this crazy um interesting place where all sorts of groundbreaking work was done in the field of computer science in particular uh and uh and r was one of the excuse me s was one of the the things that was created at bell lab so it was developed in the 70s at bell labs and it was designed as a statistical computing language so that's where this designation s comes from referring to statistics and it had as you can imagine it had a lot of statistical functionality built right into this programming language which was new at the time so if you were working as a programmer at this time and you wanted to do statistical tests you would have to code those statistical tests up yourself um and uh that was a big hassle for "
    },
    {
        "start": 244.72,
        "text": "people who wanted to do write code and perform statistical analysis of of data sets so s was created to solve that problem it was also created with the idea of being able to quickly and easily visualize data and so this combination of being able to perform statistical tests while also being able to quickly and easily visualize data was a really powerful combination and it was really attractive to a lot of people who were doing data analysis and so it was first released in 1980 unfortunately it was and is proprietary software meaning that you have to pay for it and so that really limited um its impact so you know particularly in academia we have enough trouble writing grants to get um money for pipettes and uh culture media and things like that we're not about to pay for software uh unless we absolutely have to and we just rarely do it "
    },
    {
        "start": 305.12,
        "text": "uh so s really didn't have much of an impact on the academic uh circle but it was recognized that it would be extremely useful to have something like s available to the academic community particularly biomedical researchers and in the 1990s rossi haka and robert gentleman came along and they created this new programming language which they called r and so r is kind of a reference as you can imagine back to this one letter abbreviation naming system and so r was also then a nod to r for ross and r for robert and it's a single letter and it's right by s in the alphabet so that was the name of this new programming language which was really very much based on the s programming language and they put in some of the better points and parts of some other languages as well and are really critically though carried along those very strong statistical built-in functionalities and the data visualization capabilities that made us such a powerful programming "
    },
    {
        "start": 366.24,
        "text": "language and the great thing about r is that r was and is free as in beer as well as in speech so uh it's freezing beer meaning it's free to download you don't have to pay anything and it's free as in speech meaning you can modify the source code in virtually any way you want and nobody's going to come after you that is perfectly legal so so that now allowed r to make a huge impact in the academic community and really become widely popular in all circles of biomedical data analysis and so why choose r for this course well you know some of the reasons i just mentioned but i would say that in the last few years that two languages have really emerged as leading the way in bioinformatics and those two languages are in python i don't think you can go wrong really choosing either of those as a first programming language if you're interested in bioinformatics but i'd like r and i think it's a great choice for this course for many reasons "
    },
    {
        "start": 428.24,
        "text": "it was created with statistics and biomedical data analysis in mind the data structures as we'll see particularly in the second video are really ideal for use with common biomedical data sets that's all built right into r the graphical capabilities are fantastic we'll see some of that in these videos and it also serves as the platform for many bioinformatics tools produced by the scientific community so a lot of the tools that are coming out a lot of cutting edge tools and popular tools are written for and in the r programming language so learning r gives you access to all of that at your fingertips and i think that's really invaluable r also has a really large and supportive community of developers so our programmers tend to be really nice people who are willing to help if you have questions or get stuck along the way and we'll see today that there is something called an ide which is known in r as rstudio and it's one of the best ides around that makes writing code in our "
    },
    {
        "start": 489.44,
        "text": "very seamless and easy a lot easier than it would be without rstudio so just let's get a global perspective on where r fits into the world of our universe really of programming languages so this is a plot just showing kind of trying to measure the popularity of programming languages in the y-axis here we've got the number of questions that were asked in the most popular computer science message board stack overflow so as you go up the y-axis the language has more and more questions being asked about it which is just a general measure of how popular it is you know the more people are using a language the more they'll have questions that they want to ask and so on the x-axis here this is the number of lines of code that are written in this particular year this is from a couple years ago in a particular language so we're looking at lines of code written in a language and deposited in the most popular computer science repository github and then how many questions are being asked on this super "
    },
    {
        "start": 549.839,
        "text": "popular message board stack overflow and this gives us a general measure of how popular a language is and so each of these data points as you can imagine is a programming language you know so what are the most popular programming languages out there so you've all heard of the internet and smartphones and you can imagine that programming languages that are capable of writing applications and creating websites are going to be enormously popular in the world at large and so these languages java javascript html php are really designed for that purpose and they are then as you could imagine by these measurements the most popular programming languages out there absolutely terrible though for doing any type of biomedical data analysis then we come to low level programming languages like c and c plus which are really good at doing things like writing an operating system but again very just absolutely terrible "
    },
    {
        "start": 612.24,
        "text": "honestly doing trying to do biomedical data analysis very unintuitive and just not designed for doing that sort of thing and so if we look at what's next i mean really we're going to find our programming is one of the first languages out there as being most popular that's really designed for doing data analysis and i know python is one of the other data points up here i'm not sure which one but they're really they're neck and neck and so r has been getting more popular and it continues to get more popular and the new stats this year again are bearing that out so r is increasing in popularity and so why learn something like r you know maybe you've been doing data analysis using a tool like excel and and i think there's a lot of good reasons to not do that anymore and i think it's great that you are going to be learning r and so just as an example if you're trying to work with any sort of large data which comes up all the time in biomedicine if you haven't run into "
    },
    {
        "start": 672.64,
        "text": "it yet you will in your career you know excel is going to start choking on that type of data so right now or the last i checked a spreadsheet in excel could only have a million rows or six and sixteen thousand columns and if we just think about the human genome that has twenty 000 genes well if you've got a column for each gene which is not uncommon in a genome my data set of which there are many you're going to run into this problem of actually not being able to load the whole data set into excel and it's just not designed for doing the type of analysis that we want to do another issue with excel that's come up is you know it's gonna it's it's gonna be looking at gene names for example uh genes like march one and step two it's going to recognize those as dates and automatically turn those into the dates march 1st and september 2nd again just showing that excel is not really designed with biomedical data analysis in mind and you would think this isn't a big deal but it's actually sort of tripped up investigators and it's it's gotten into the literature so "
    },
    {
        "start": 734.16,
        "text": "here's a paper back in 2004 about how these mistaken identifiers thanks to excel are getting into all sorts of databases and that problem unfortunately was still persisting in another paper uh that was demonstrated in another paper back just a few years ago in 2016. so really we want to get away from using excel for doing our biomedical data analysis it's a fine tool for other things but really not what we want to be using and so if you're new to coding uh i just wanted to take a a one minute here and just mention the process you know that kind of goes along with coding so writing code in any language is a process and that's certainly true for r rarely will you write code that works perfectly the first time you'll rarely sit down and think i want to get this done let me write this code i hit enter and it all works it just doesn't happen you're going to get errors you will fix them that will lead to some more errors and you'll fix them and then when you sort of least expect it you'll hit enter "
    },
    {
        "start": 794.32,
        "text": "and everything will work perfectly and it will be an amazing feeling but just know that it's a process and there will be moments where you will think you are a hack and you might want to bang your head against the wall just take a deep breath walk away come back you know contact your gsi email me and we'll help you through it so it is a process and you're not alone but if you get there it does feel amazing and i wanted to mention something about these two videos so we're not going to be doing you know i guess i would say the fun stuff you know that's we're going to be getting the basics under our belt we're going to be getting sort of the building blocks here so uh you know i'm kind of using this lego analogy i'm assuming you know nothing about r so we've got to get the building blocks here uh you know into our tool kit and then it's when you get comfortable with these that you'll be able to make something cool right you'll be able to take this back to your lab and apply it to your research and make something that's actually really interesting so just bear that in mind "
    },
    {
        "start": 855.36,
        "text": "you know today and the next video maybe not be the the most exciting parts of the our programming language but you know you've got to eat your vegetables and get things off the ground and you know and i hopefully you still will find it interesting so if we're going to write code in our programming language we need to get the our programming language so if you haven't done so already you can go to the cran.r project dot org website here and you can download the r programming language for your operating system so whether you're working on a mac or windows or perhaps you're even in a linux you can choose the appropriate version of r for your operating system for me i would click on mac which would take me then to a page where you can download the installer you'll just then download that open it up and install saw that software just as you would install any other piece of software by following those instructions and so that gives us the our programming language but you really don't want to try to write code just using the raw programming language "
    },
    {
        "start": 916.8,
        "text": "itself so it's a difficult thing to do something i don't recommend maybe you'll gravitate to that later on in your career but for now we're going to be using something called an ide so an integrated development environment and what an ide does is it's sort of a go-between so it sort of sits between you the programmer and the actual language on your computer and it's just going to be there to provide a nice interface for you to work with the r programming language so it's going to make writing and running and debugging code a lot easier than if you were just to use the sort of raw our programming interface it's going to give us some menus and clickable icons and things that just just make life easier and i should mention that uh you know each programming languages ha each programming language has an ide or many ides and our studio is just universally loved it's thought of as one of the best ides for any language everybody virtually everybody i know "
    },
    {
        "start": 978.16,
        "text": "that programs in r uses rstudio as their ide it's overwhelmingly popular and for good reason okay so let's go get our studio so if you haven't done that already take a minute and you can go to rstudio.com and go to the download section and then that should take you to a page where you've got all these options of course choose this which is the free version we are not running a business or a server so just download rstudio for your desktop the free version that is all we'll ever need and then it should take you to a page where it'll probably actually recognize your operating system as it did here and it said hey looks like you're on a mac why don't you download this one and so just go ahead and do that and again install it as you would install any software previously okay so once you've done that uh we're going to open up our studio we're going to get our first session of rstudio going and what we'll always do when we open up our studio is "
    },
    {
        "start": 1038.4,
        "text": "we're going to the first thing we're going to do is set our working directory and so what do i mean by that so we're going to go to the session drop down menu and we're going to go to set working directory and we're going to choose a directory and that directory is going to tell our studio in our program and our language where to look for files when we want to bring files into our our environment which we'll be doing i think we'll get i forget if we get that to that today or tomorrow but we will be doing that and we need to tell our studio and our where our files are located and so just by setting a working directory it's going to point our session of our studio at a particular directory you know which is another a synonym for a folder in your file system and so that's what we do whenever we start out we want us the first thing we do is just fire up our studio and set our working directory and so let's go ahead and do that so i'm going to open up our studios so i've got the r "
    },
    {
        "start": 1099.2,
        "text": "studio icon here all right and we've got something from a previous session so yours if you're opening it up for the first time it should look something like this and then you would want to go to session set working directory and then choose directory and then that's going to allow you to navigate to wherever in your file system that you have the files we're going to work with and so those are those two files that i asked you to download at the start of this video and so i'm just going to go to where that is in my file system so and 527 for this year our intro our materials and so here's my directory that contains uh those two files it's got some other stuff in there uh like these videos and the powerpoint slide decks that you won't have but you should have these these two files in there which are called rep1.txt and alzheimer's dot csv and i'm just gonna by clicking open that's gonna set my my working directory as that directory and as soon as we do "
    },
    {
        "start": 1161.2,
        "text": "that we can see the actual code that pops up that we could have actually just run this code and that would have accomplished the same thing that would happen when we use the drop down menu and so we can run you know our first line of code we can say list dot files open parentheses close parentheses and if we just hit enter we'll see all the files that are in our working directory so everything that our session of our studio is sort of looking at and like i said i've got some uh versions of the slide decks here and then i've got the what the files you should have which are alzheimer's and rep one and so now we've accomplished setting our working directory which is really what we want to do every time we fire up a session of our studio okay and so we've done that we've taken a look at what's there with list.files the next thing i want to do is get comfortable with the rstudio interface so there's four main sections in the "
    },
    {
        "start": 1221.679,
        "text": "rstudio window these different panes and if this is the first time you've opened it up only three will be visible so it should look something like this the first section of the rstudio interface that i want to point you to is the console and this is where you can go in and write code and hit enter and it will run and you can just interactively write code and hit enter and see what happens and so so let's do that a little bit so the first thing we're going to do is we're going to actually bring in a data set that's called a built-in data set so our uh the programming language has a few data sets that are sort of always available to us we don't have to import them from our file system or any external database they're just always sort of there and we can access them by just typing the command data open parentheses iris in quotes so we're going to grab a data set called iris and then close out those parentheses and then after that we can that'll bring "
    },
    {
        "start": 1281.919,
        "text": "this data set into our environment and then we can take a look at that environment or that data set by typing capital v view and then iris in parentheses and so let's go to the console and let's just let's just type those commands in and see what we get so if we go back here and we say all right i want to grab the iris data set and that's going to do that and now i want to view the iris data set and we hit enter and so now we'll see the fourth section of the rstudio interface sort of pops into being up there and we'll get back to that in a second so this iris dataset just so you're aware of what it is um it contains data on 150 flowers from three different species of iris so there's the versacler the virginica and the setosa species of iris and there's that's what this data these data are all about they're different measures of the sepal uh and the petal length and width for these um different uh flowers okay and so the "
    },
    {
        "start": 1344.24,
        "text": "that's the console so we've got the console down here uh the other another section of the rstudio interface is called the environment section or environment pane and that's in the upper right hand corner here and so that's going to tell us about everything that exists in our current session of our studio and so everything that exists in an r session is an object and so really what we're seeing here are all the objects that exist in our session right now and so the only thing that exists right now is the iris data set because we just brought that iris data set into our environment through that data command and so now we can see that's there so if we toggle back over to r you know we should see that we've got this global environment and there's only one thing one object present in that environment and it is this iris data set and so we've got the console down here where we can type code and we've got the global environment up here that tells us what's current what are the currently what are the objects that are currently "
    },
    {
        "start": 1404.64,
        "text": "in our environment okay and then we've got the next uh sort of section of the rstudio interface which is the source pane and that's where we can actually see the data set when we typed in view iris it sort of popped open that section and we can take a look at the data set that we've that we've pulled into our environment and we can see we've got these columns which are different measurements of these different flowers and the species name is in another column and if we scroll down we'll see there's all three species are actually represented okay so the fourth pane or section of the rstudio interface is in the lower right it's got several tabs and it's most famous for being where you can visualize data and so what i want to do next is type in another command and then we're just going to be saying plot open parentheses iris close parentheses and what that's going to do is it's going to generate something called a scatter plot matrix "
    },
    {
        "start": 1465.279,
        "text": "and we'll see that showing up down in the lower right section of our rstudio interface and so let's go ahead and do that together and so if we just say plot iris and there we have it so this is a scatter plot matrix generated from the iris data set and so i think this is a really nice i'm going to pop that out by hitting zoom this is a really nice demonstration of the power of the r programming language at least in my opinion so just by writing that plot iris command we get a data a data visualization that shows us for every measurement in our data set for simple lengths equal width pedal length pedal width and for the species we have a dot plot comparing each measurement against each other measurements so all pairwise combinations so so if we look just at this graph here this plot here this is sepal length plotted on the y-axis versus sepal width plotted on the x-axis "
    },
    {
        "start": 1527.84,
        "text": "this plot here is going to be sepal length on the y-axis versus petal length on the x-axis and so on so you just kind of draw a line to connect where the plot is and that will tell you what the y and x-axis are and it's really you know i think again a powerful demonstration of of how r can help us to visualize our data you know just by typing that very simple command we can quickly see relationships in our data and that's often what we're looking for is we want to know how does one measurement vary relative to another measurement are there relationships positive negative correlations you know we can see you know just for example with sepal length and pedal length we can see there's a very strong positive correlation going on here but also that there's two very distinct data clouds that are being plotted and so that can quickly point to interesting conclusions that we can make from these data and potential new hypotheses that we could go back and test in the lab just by typing that simple command we can really start exploring "
    },
    {
        "start": 1587.84,
        "text": "our data and it doesn't get much easier than that okay so we won't typically be writing code down in that console as we've been doing so far because once we write the code in the console and execute it it goes away so we typically want to write code as part of us what we call an r script and that will allow us to save that code and use it for the future and modify it make it better share it with others and so the way we get an r script that we can start writing code in is we'll use another drop down menu from rstudio and we'll go file new file our script so let's go do that all right so that gives us an r script where we can now write our code so in the upper left-hand section of the rstudio interface we now have an r script okay so i am sort of contractually obligated to mention that r can be used as a calculator just like "
    },
    {
        "start": 1648.08,
        "text": "about every other programming language out there so we can go and do something like 100 plus one and we can run that by then clicking on run and it will run the line of code where our cursor is so we can say 100 plus one and by running that it's actually going to send it down to the console but we'll be able to keep that line of code and then it's going to give us the result so when we say 100 plus 1 we get the expected result of 101. and so what we're going to do next is then you know actually store this information so what we just did is we ran some code and we got a result but that result sort of evaporated into the ether and that's not what we want we typically want to do calculations and we want to store that information for future use and so the way we're going to do that is by creating objects and the way we do that in r is through something called use of something called the assignment operator and so this is the assignment operator here it's supposed to look like an "
    },
    {
        "start": 1708.48,
        "text": "arrow in actuality it's an angled bracket or the lesson sign and a dash so it's kind of a hacky way to make an arrow and the way we use that assignment operator to create new objects in r is we'll name whatever we want to name our new object i'm just calling it in this case my object and we use this assignment operator and then we'll type a calculation we'll run we'll type some commands something over here on the right and whatever the result of that code is on the right it's going to get stored so the arrow is kind of pointing at where it's going the result is going to get stored into this my object object and so let's go over and do that so we can say my object and i want to store the result of 100 plus one and so now we'll see now we've got our global environment over here and as soon as we we create that object there it is it's keeping track of all the objects now we've got this new object called my object and we can access that "
    },
    {
        "start": 1769.2,
        "text": "information anytime we want just by typing my object and send that down to the console with run and there it is there we get our value of 101 which has been stored inside of that object okay so just a real quick public service announcement you don't need white space in r you could run the same line of code without any spaces in between anything and it would execute just fine but you should definitely use white space so um it's going to make your code more readable not only for you but for anyone else who happens to try to read it and figure out what's going on in the future so please i see people writing without white space and it really is it's painful to try to read so so take advantage of white space when you can to make your code more readable okay we've got that my object object in our environment so now that we know how to create objects we do need to know that there "
    },
    {
        "start": 1829.44,
        "text": "are a couple rules for coming up with those names and so the rules in r are you have to use letters and numbers you can also use the period symbol or the underscore symbol and all of your object names must start with a letter or a period if it starts with a period it cannot be followed by a number and then there's a host of reserved words that just can't be used for the name of names of objects that you create and are so there are reserved words like if else repeat while so these all have meaning in the r programming language so we can't uh generate an object with that same name so they're reserved words and so are the rest of these true and false null inf n a n and so on so these are all just fine these object names over here on the right these are invalid you can't use an asterisk you can't start with a number uh you can't start with an underscore you can't use a reserved word the word true all caps is reserved in r and you can't start with a period and "
    },
    {
        "start": 1889.519,
        "text": "then have a number so just just to be aware but more importantly really when you start naming objects when you're writing our code is to be descriptive so a name like date of birth is a fantastic name for an object it tells you a lot more about what that is being what that object contains than something like d or d ob or date okay so what are the naming conventions in r so of course there are conventions that people follow and you should pick a convention and follow it so you have consistency in how you name your objects and there are several schools of thought on that and people get very passionate about it you would be surprised but there are a couple of articles here if you want to take a look at some people arguing about how to name objects in r it boils down to a few different schools of thought one is that some people like all lower case i find that difficult to read people who've been programming an r for a long time typically use the period separated object names "
    },
    {
        "start": 1951.679,
        "text": "but now that python is also such a popular language i think it's a bad choice because that period has meaning in a language like python so you know someone we're going back and forth between python and r which is not unusual these days it would make it very confusing to look at your objects in r and see that naming convention so you'll see it a lot it's very popular in r i just don't personally like it for those reasons uh camel case is is quite popular i think it's ugly uh and so for me i like to use underscore separated object names but that's just me it's a personal preference it doesn't make a huge difference what you choose just please be consistent so don't toggle back and forth between different conventions in the same r script pick something and stick with it and uh and that'll make life easier for you and everybody else all right so let's jump into a few exercises to sort of flex these new r muscles that we're building so let's just get "
    },
    {
        "start": 2012.559,
        "text": "comfortable creating some objects so assign the value 10 to a new object called my underscore object so you can if you already have created that along with me previously this will just overwrite what was previously there so now assign the value of 10 and that will be the new value held by that object also then create another new object called my object my underscore object underscore 2 and assign the value of 3 to that and then go ahead and try out some of ours arithmetic operators on these two objects so go ahead and you know use the addition subtraction and division and then try out some of these more exotic arithmetic operators that we see here uh and then once you've done that and seen how those work go jump into exercise two where you're going to load in another one of these built-in data sets so in this case it's not iris it's called air quality and so you can do that just by typing data air quality inside of quotes inside of parentheses you can learn about that air quality data set by typing question mark air "
    },
    {
        "start": 2072.72,
        "text": "quality and then you can plot it so visualize that data set just like we did for iris and see what you can find in there so what do you what do you learn almost instantly about ozone and temperature and ozone and wind and even ozone and day of the month so see what you can get out of that then exercise three answer this question so is our case sensitive so can you assign a value to lowercase x and then assign a different value to uppercase x so can you have two different objects in your environment one lowercase x and the other uppercase x and so go ahead pause the video here and then when you come back we'll take a look at the answers for that okay so here we are with exercise one and we're just creating these objects and assigning the values ten and the value three and of course we can add them get the expected results subtract and divide get those expected results uh the the two asterisks will actually "
    },
    {
        "start": 2133.76,
        "text": "raise something to a power so in this case we were raising 10 to the third power and of course we get a thousand here by using percent percent we're actually asking for the remainder and so this comes this is actually surprisingly useful when writing code and it comes up more than you would expect in wanting to do something like this and so you can actually find out what is the remainder when i divide two numbers so in this case it's one of course and then sort of analogously using percent forward slash percent we can find out how many times a number divides completely into another number so in this case three divides into 10 three whole times with a remainder one in exercise two when you load in data air quality with data air quality and you take a look at it you'll find out it's a data set that contains air quality measures i think it's from new york city and is back in the 70s and so it's got measurements of ozone uh solar radiation wind temperature and so on and then by just quickly visualizing that data we see a bunch of things that "
    },
    {
        "start": 2195.28,
        "text": "are interesting so for example ozone and wind if we look at the plot of those two measurements against each other we can see that as wind speeds increase ozone levels decrease and then if we look at temperature versus ozone we can see just the opposite so as temperature increases that causes ozone to increase and so this is why in michigan we tend to have these ozone action days on days when it's low wind and high temperature and then something like that's really interesting that i never would have predicted uh and never would have thought to actually plot but because it's so easy to just make a plot of everything in r we actually get this uh this data this visualization to look at is if we look at the day of the month versus ozone and it looks like the ozone action levels actually decrease in the middle of each month why is that i have no idea is that statistically significant you know how strong is that trend well you know fortunately r has lots of built-in "
    },
    {
        "start": 2256.56,
        "text": "statistical functionality that we could go and analyze these data with um but what's important here to me is that we never probably would have predicted this but the the ease with which we are able to visualize data in our made it possible for us to take a look at this it was no extra effort and we might have a new interesting hypothesis coming out of our data you know you can imagine this is actually data on something that you are particularly interested in and not the air quality in new york city in the 1970s uh so uh so i think that's cool and it's another demonstration of the power of the r programming language and then the answer to is our case sensitive yes it is so you can actually assign the value negative 10 in this case to lowercase x and 10 to the fifth power to uppercase x and those two separate objects will exist in your r environment okay and then two tips now that we've gotten really comfortable working with our studio and creating "
    },
    {
        "start": 2318.32,
        "text": "some objects these are going to help you out as you go along so our studio supports tab complete and so what do i mean by that so if we just start typing something like my it's gonna just by hitting tab it will complete that that that expression there so as soon as i started typing my if i hit tab it knows in my particular environment i only have one object that starts with my and so i can just hit tab and it'll automatically complete that if i were to have another object as you should have at this point and we're going to run that now we've got these two objects that both start with my so i can go mine and once i hit tab it's going to give me two options and now i can just say oh i wanted this one and then you just tap complete that and you can send that down to the console and so tab complete gets really helpful the more objects you have the longer those names get like i said you should be descriptive so your object names can get pretty long but tab complete makes that sort of "
    },
    {
        "start": 2380.839,
        "text": "insignificant and then the up arrow allows you to grab previous commands so that's really useful too sometimes if you jump down into the console and just start hitting up you'll grab all the old code that you've been writing and you can go and grab a command that you wrote and you want to grab again so another sort of handy tip just to mention at the outset here okay so let's talk about an extremely important concept in r hard for me to emphasize how important this topic is and that is data types and so all objects in r are going to contain data of a particular type a data type is something that describes what kind of data is being contained within an object and examples of data types that an object may hold in r are numeric character logical and factor and so this may seem like a simple concept but not knowing or assuming that you know the type of data that an object holds is i would argue the most common source of errors when writing our code "
    },
    {
        "start": 2442.079,
        "text": "beyond just typos so so not understanding data types and what your objects are holding is is really where a lot of our errors come from and when you are getting an error and you don't understand why the first thing i want you to think about is is do i have a correct understanding of the data types that i'm working with in these objects and so let's talk about these data types so first is the numeric data type probably the most intuitive one so in r the numeric data type consists of both integers or whole numbers and floats or numbers that have decimal points and so in almost all cases and in fact i can't think of one where you would need to worry about the difference between the two r is going to handle the difference between a whole number and a number with decimals perfectly for you under the hood and that's not true in all programming languages some languages you have to handle integers and floats sort of separately and it can be a pain "
    },
    {
        "start": 2503.839,
        "text": "in the butt but are it's not at all a pain in the butt it's very easy they're all just considered data of type numeric so we can go ahead and we can create my object and assign that the value 42 and we can say is that numeric so we're asking is that numeric and we can run that and we get the answer true so that is that is numeric data and similarly we can create an object and assign a float value to that and we can say is dot numeric my object two and if we run that that will also be true so those are both um data of type numeric so that should be pretty straightforward i think "
    },
    {
        "start": 2567.2,
        "text": "the next important data type in r is the data type character and so it's pretty straightforward again in r anything you put in quotes r is going to see as data of type character so we can create data of type character just by putting something in quote so here we're putting g in quotes we could also put something like go blue and that's going to take all of that character data and put it into this my object and we can see is that character and yes r would tell us that it certainly is you can do things that maybe look a little trickier so if we say my object and we put the value 42 but we put it in quotes r is going to see that as data of type character it will not be numeric it's going to be seen as the character 4 and the character 2 not the number 42 because we have put that in quotes here and so we could say is dot character of that and yes it would come back as true if we said is dot numeric on that object it would say false because that is no longer it is not numeric even though it may look like it "
    },
    {
        "start": 2627.52,
        "text": "and then there's the logical data type so the logical data type is is a data type that is consisted of the the value true and the value false and that's it so true and false make up the entire logical data type uh in r and so we'll see today how very useful this logical data type can be and so to generate data of type logical we're going to be generating we're going to be using what's known as logical operators and so you know a lot of these you'll be familiar with so logical operators are things like greater than greater than equal to less than less than or equal to something that you might not be familiar with but in r to ask if something is equivalent to something else we say equals equals and if we want to say is something not equal to or not equivalent to we say bang or ex or exclamation point equals to ask the question is something equal or not equal to something so those are the logical operators we'll be working with those "
    },
    {
        "start": 2688.16,
        "text": "as we go along here and then the last data type in our common data type in r is the factor data type so this is a special data type that's used for defining categories uh in a data set so an example of that would be in the iris data set so we had these categories for a different species of iris we have these three different species and so those are categories so that's data of type factor other things that you might you know just examples of what data type factor might be in a data set would be say treated versus control or whether a sample was a tumor sample versus a normal sample and the great thing about the factor data type in r is it lets us do subgroup analyses so we can ask you know we can do an analysis where we just analyze the tumor and then get another analysis for the normal and then we can compare those two so having this factor data type in r allows us to do this sort of subgroup analysis on our data sets okay so the next sort of big topic in "
    },
    {
        "start": 2749.28,
        "text": "our programming when we're getting started after data types is data structures so all objects in r are going to contain data of a particular type so numeric character logical factor and then all objects in r also have a structure and so there's going to be the four most common data structures are the vector list matrix and data frame we're going to be focusing for the most part on vectors and data frames are really the most common but lists and matrices will definitely come up and so let's start with vectors so vectors are really the simplest data structure in r they're one-dimensional data structures and they contain data of a single type so you can think of them you know here we've got a schematic here a vector is really kind of like a one-dimensional line and along that line we just have values and those values all have to be of the same type so if we have the values one two three four five that could form a vector of type numeric and so we want to start creating some vectors so we've already created some "
    },
    {
        "start": 2809.28,
        "text": "objects let's start creating some vectors and so in order to create vectors in r we're going to need to use what's known as a function call and functions are at the heart of the r programming language virtually everything we do in r will involve a function call and so i've got some quotes here from john chambers so he is the creator of the s programming language and he's also currently a member of the our core development team so he kind of contributes to keeping r up to date and fixing bugs and making it better and better as time goes on and so if he says something about r it's probably true and what john chambers says is you can think in r that everything exists is an object and that everything that happens is a function call so we know how to create objects and let's see and learn more about how to actually call functions in r and so in order to create vectors in r we're going to use a function call and so this is the general syntax for calling functions in r we're going to be doing this all the time and fortunately it's very simple so "
    },
    {
        "start": 2870.079,
        "text": "whenever we want to call a function in r we just we type the name of that function and then we're going to have to give that function information so that it can do its job so and though those pieces of information are called arguments so when we want to run a function we're going to type that function's name and then inside of parentheses we're going to feed it pieces of information that let that function do its job and those are called arguments and so there's a good listing of sort of the common are functions if you want to go check those out here and so we're going to be using the first function that we're going to really be talking about in depth is the c function and so this is a function that's used for creating vectors and so c you can think of it as standing for combine or concatenate and the way it works is we're just going to type that that one word or that one letter c and that's the whole name of this function and then we're going to give it arguments and in the case of c those arguments are just the values that we want to put in our vector "
    },
    {
        "start": 2930.48,
        "text": "so we could say c and then i want to create this vector 1 2 3 4 5 and then we would have a vector stored in that object my numeric vector and so let's go and do that together get some white space here so if i say my numeric vector and i'm going to assign that to the result of this call to the c function and then if i just give it those values and i run that now i've got a new object in my environment called my numeric vector and if i take a look at what's in that vector send that down to the console now i can see that it's one two three four five this is a vector of numeric data so we've now stored that as an object there are some shortcuts that we can use so instead of typing all of that out r does have the colon operator that lets us get the values one through five so we can just say c one through five and that's going to create that very "
    },
    {
        "start": 2991.44,
        "text": "same vector so it's gonna give us all the whole numbers between one and five inclusive and we can do the same for character data so if we want to create a character vector we would just you know call this c function again and then feed in some character data and so we could do that very easily by saying my character vector and we would assign to that in this case i'm just going to assign sample 1 sample 2 and sample three and so now i'm creating that vector using the c function and the assignment operator i've got this new object in my environment and it contains now those three pieces of character data and you can do the same and create a vector of logical data as well and i won't i won't demonstrate that but you can give that a shot yourself if you'd like and see that that works as well and so "
    },
    {
        "start": 3053.2,
        "text": "let's jump into another exercise here so um here we're going to generate two numeric vectors if you're choosing so whatever numeric vectors you want go ahead and create them and then try adding those numeric vectors together but before you hit enter before you run that code down in the console make a prediction in your head of what you think what will happen and or maybe even what you would like to happen and then try multiplying those vectors together again make a prediction and then finally try multiplying one of your numeric vectors by the number five uh and uh we've just got a reminder of the syntax here for creating numeric vectors so you don't have to go back uh and then the next exercise i want you to create two character vectors of your choosing and then try adding those together you should get an error so don't be surprised when you get an error there and then try putting your character vectors together by using the c function so try to combine your two separate character vectors into one using the c function and so go ahead and pause the video and give that a try and then we'll come back "
    },
    {
        "start": 3114.8,
        "text": "in a moment and take a look at those answers okay so uh so what happens if we try this so in this case i created two vectors uh one was going to be the values from one to five the other is the values six to ten and there those vectors are and then what if we add them together well it's actually pretty interesting what happens so what what r is going to do when we add vectors together there are a lot of things it could have done you know could have added up all these numbers and then added that value to the sum of all these numbers but that's not what r does r actually does what i think we would want it to do in most cases it's going to take each element of that vector and add them together element by element so it's going to say the first element of this vector is 1 the first element of this vector is 6 and it's going to add that together to give us 7. likewise we get 2 plus 7 is 9 3 plus 8 is 11 and so on and so this behavior it may not seem "
    },
    {
        "start": 3175.119,
        "text": "that impressive but it's actually wonderful and the reason it's wonderful is it prevents us from having to write loops all the time so in other languages you would actually often have to write a loop and say and it would be a bit of a bit more complicated piece of code to add up each element of these vectors but r just kind of understands that oftentimes when we're working with vectors that's what we would want to happen and similarly when we multiply vectors it's going to do it element by element 1 times 6 is 6. 2 times 7 is 14 and so on and then if we have two vector if we have a vector we multiply it by the value 5. so the value 5 is actually a vector it's just a vector of length 1. and so what r is going to do is it's going to say okay the first element of this vector is 5 and the first element of this vector is 1 and so it's going to multiply those together to give you 5. and then it's going to see there's no more elements of this vector so it's just going to recycle it's going to do what's called recycling and it's just "
    },
    {
        "start": 3235.599,
        "text": "going to grab okay i'm just going to reuse the value 5. that's all i've got and multiply that by 2 to give us 10. it'll recycle again times 3 is 15 and so on and so this is a really nice built-in capability and functionality of r that will come in handy when you're analyzing data and so exercise five here i just created two character vectors one that contains patient one two and three another one that contains patients four and five and if we try to add those together it's going to give us an error so it's going to tell us basically that hey you're trying to do math on data of type character so this is our first data type error and so r will not know what to do and it'll say hey you're you know i can't do math on data of type character you have to try something else and so you know something like this will work in other languages like python but i actually like how r handles it you can't do math on data of type character and the way you actually combine two vectors of data of type character "
    },
    {
        "start": 3295.76,
        "text": "actually makes sense to me is you're going to be using the c or the combined function so we're just going to say all right i've got these two separate character vectors i want to combine them together so i'm just going to use c so i say c and the first argument will be this character vector the second argument will be this character vector and then we'll get out from that our third character vector assuming we assign all that to a new object and it's going to contain patients one through five and so here's just you know i'll just be throwing some functions at you as we go along so we can actually easily create labels for data if our if we get data data that's not labeled or not labeled how we want it uh by using a function like the paste function so we could say paste patient one to a hundred and then separator is the underscore so here's our function called paste and then here are three different arguments that we're going to feed to that function and let's just do that just to see what it does so we're going to paste patient "
    },
    {
        "start": 3356.64,
        "text": "oops so look at these 1-100 and our separators can read the underscore and you can see we can quickly get labels for an entire data set and label things however we want just by using a handy function like paste and you know we'll be learning more about functions and like this as we go along here we'll just go to keep building up our tool kit okay and so that's it for today um so uh hopefully that was useful and then what we'll do is we'll jump in and start talking about some a little more complicated data structures beyond the vector next time and [Music] and so yeah i can't escape out here to say goodbye with my video here without stopping my recording so i will just say see you next time that's it "
    }
]