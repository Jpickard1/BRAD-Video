[Music] thank you very much for attending today's seminar by coaching in our level so as some of you may know that Curtin has been working on project called Cornell so the main goal is to develop a visualization of application that will help bench by others to explore and analyze their data more efficiently so Curtin has made great progress in advancing the core map and he is now branching it into a project that to build a interactive visual platform that will allow people to inspect and analyze of their date from different perspectives hey everyone my name is Katia I I work for fan on a on an application called chrome app as fans that it's a data analysis and visualization tool and we have couple slides in my powerpoint today too welcome APIs because we have given stamina like last year I took second technology and tours Samuel and yeah we're gonna take a look at work home Rapids later so actually our topic today if you guys don't mind it can I just sit down because yeah I have one demo to show later so our topic today is called as cross application data exploration through our shiny so we have we got a lot of logos on end so basic I I don't know like how many of you guys have ever use our like I will assume like yeah most of you guys use our but I don't know if you use our shiny if you have used our shiny can you raise your hand okay just one two three yeah that's cool yeah I actually just Scott's story of boys are shiny as well and yeah I would just give like a basic idea what it is and how you can incorporate it into your application okay so just now use yeah presenter for you I don't know which one is that so first let's take a look at our motivation so why do we need cross application exploration so a lot of times you find you want to see or like investigate your data through different perspective it's different perspectives it it includes like plotting different like graphs that's also like involve different type of analysis and using different tools by different tools it might be just a like a ladle script or it might be a whole application so that's why that that's also like principle another like problem because each application only addresses some possible data analysis needs or they only do some sort of like plottings or analysis excuse me question here so quite cross application do you mean look at general purpose for yeah that's the goal we're trying to do yeah yeah you're gonna get a better idea of it yeah so for multiple applications we want real-time inter interactivity so it will first increase the scope and depth of the data exploration as well as a spear like it's is up your exploration and it also enables the researchers to test like many parameters ideas you just go back and forth in different applications and to see you know what changes in this plot affects like another thing in that other application or other analysis so the major challenges we we now facing is first is a lack of real time interactivity so we really use different applications for sequential analysis like you process the data in one app and you pass it to down to another application and do something and maybe output to a file or something you read it into another application just do things like that so the other way we have available now is using some application api s-- for like center scape it comes with a restful service so basically can from other application where you can just call the aps from a browser to get the data or or standard like a network or something to cider skin so it this is only bilaterally interacted with oh yeah so what we need here is something that would comes as a central point and it serves as central point for getting data and dispatching operations and also aggregating the results from two different applications and it can also be extended to more applications so that's why shiny comes into place so shiny is our package it's actually our studio package developed to use for like right web applications so it comes with UI components handy for you to use it also supports all the our libraries as like such as GG plots so it's a pretty good tool not only for creating the UI components on a web browser it also enables you to use our scripts like analysis functions and our plottings as well so the reason to use shiny that's a lot it's it's our and it's also web-based I mean a lot of applications nowadays wrong on the browsers and you can put it on a server which will further enable you to but now let's analyze like larger data sets and it's designed to create interactive user interface in the front-end while our manages those analysis functions in the backend and you can easily create the project shiny project in our studio that's I mean pretty easy to use IDE instead of like just use like console and also we're gonna introduce you know the concept of reactive in shiny which makes it's pretty easy to do interactive programming so this is a very very simple like shiny exam example I'm gonna run it like locally on my computer to show how like how many lines of code you're gonna write and what you get from the code basically this application only has two parts the left side is input like UI component which you can drag to choose like how many how many beans you want to use for the histogram and this just the graph on the right side like changes like according to the sliders so this is an easy app but if you're gonna write like JavaScript or if you do it in Java it's still like it still requires some bit of code but in SHINee it's only like this so server-side it's only just this three kind of three lines of code and the UI side it's actually just this so I'm gonna go into the details like that's like all right so why it's why it's easy to use shiny to do this because shiny has something called reactive programming so what is a reactive reactivity think of Excel spreadsheet like when you put a number in one cell and a formula you know another cell like depending on the changes of the previous cell though this this is the basic idea of reactive so you shiny like what is similar is the input changes get propagated to the output so basic shiny takes care of this instead of like requires you to write the code to handle those invents or like fighting variables all this so it can be used to many more sophisticated use cases than just you know in this case from the input to the output so to show you what reactive like programming works in our shiny let's first take a look at the reactive values what what reactive values are so basically shiny every I mean all the inputs are reactive values what is an input in shiny so since it's for web development usually you put some UI components at the UI I mean the client in this case is a slider to choose a number so with this one light this code here slide into it you give this UI component an ID continum and a label that's it so you can go out this input anytime you want use i-beam num so on the right button that that line of code is actually run on the server side which as to curving the value of the input nom and put it into like you did to draw the plot so basically here what the via the reactive value is improve dollar sign nom so every every reactive value have to be paired with reactive function and the rendered plot function is a reactive function so every time a reactive value changes it will cause reactions down the data stream and it can be summarized as reactive value notify and reactive functions we stop so since we already have like reactive expressions say our values you need to write reactive functions to work with that I'm not gonna go through all this list but the basic idea is this functions are the functions that you use with reactive values if you want to draw a plot if you want part of your applications change while there is a change or there is a reactive value change so what we used most are I would say the render functions because after user input at odd the data sets we want to draw plots I mean from those data we imported so render plot render functions are all reactive functions you can could you can basically put every reactive value unit and to for you to create a reactive value or what we call here is a reactive block expression is to conquer active function so they see if you write a block of code into interactive parenthesis this block of code can be used as a reactive expression later in the server-side so once this block of this this value changes the the other part of code that depends on it will change as well I guess in this case say impute nom is directive value every time it changes the vendor plot will rerun so but sometimes you might want you might not always want that because you say you don't want her to change the title of the graph or a plot every time you type with type of like change the attacks you you might want to trigger it only when you click on the button so to do that you use isolate to isolate a reactive value from from the the reactive environment so we also have observed in van and observe those functions are actually I would say they are pretty identical but observe observing then you have to explicitly specify what variables or what events you are observing on but observe just changes every time like the enclosing one of the enclosing variable attractive variable changes so we also have invented reactive which will take a action Orwell will actually create an object instead of just performing a like operation one when the enclosing reactant value changes so for reactive values it just creates a vector or a list of reactive values so I'm showing you these functions because I think it might give you intuition that how how you might be able to apply those programming concepts to like the tools you guys might working on or even if you find it it's interesting water like write a function to our Sonya and that would be cool too how does that approach the reactive approach did you know I think we have variables different and or better than two-way data-binding there's a lot of web frameworks they provide you to a dividing when you know from user interface it gets propagated on your model changes in one thing is it's a long way binding right because you find this variable to some events but you don't pass it back that's one thing but the other thing is I know there are reactive programming or say like similar concepts you know the programming language liking swift i we have like variable bindings as well we don't use that because we want to use our that's why we use shiny because shiny is basically are we want to do those analysis that's basically major reason it's not only the oh I mean if you just you know you don't have expression to do that like but you can just rap like you can define post variable as reactive and include them into the code block you have like on the on both sides yeah that will work I mean pretty similar to what you said [Music] it's both actually yeah but because like for the input like that like like that slider we just talked about it's a UI component which you put in a UI site but it generates reactive value in server-side in this application I would say it's a whole application yeah you don't have to figure out like you know where which side is called like executed but that value is available in server side as well I would say it's not really rendered or something it only is does the calculation everything but it actually generates JavaScript it used some of the Java library and those JavaScript scripts would be wrong in your browser which is a browsers render mechanism to draw these thoughts so does that make sense yeah yeah but it's not asked to do that it's all you know managed by shining yeah yeah so since we have shiny we want to use to work out a solution to solve what we we were what we wanted to basically across application data exchange a data exploration also we wanted yeah we wanted to incorporate different multiple like applications such as cool metal cider scape and many more so since I'm gonna first introduce how shiny works with cornet I think it's a good time to recap we visit what cornet is so the basic basic idea of cool map actually is pretty simple it uses a map to realize your data but will be changed from a static heat map is we included different autologous or just tree structures to row and column notes so basically you can expand or collapse those notes so no matter like how big this hint that is if you have those tree that those autologous or are clusters on your rosette or columns on you can always condense the data into a very small small like portion so you can get like a very high level concept of your data and then dive into a certain part of the data by expanding a certain branch so that's why we defined core map as a heat map + dynamic row and column oncologist yeah so when we do like collapsing and extending we usually use like aggregation method to aggregate the values like me or just median or something so we do have some existing data exchange in call that I guess that's basically what what we talked about in my last seminar last year like dr. maybe July or something so we have we have provided data for other applications through our API so we can map our nodes to status it's actually using other escapes api to send the data if yeah and we can also send a gene list to igv and also like control the basically any animation created animation like to control how frequently you send the list like how many genes you want to sent each batch so and we also have the function to map cytoscape selection to whole map but that only works with cytoscape and basically we have our we incorporated our by cornet planning called just up clogging yeah okay yeah we can exchange data between for map and our session we we actually write a console to for you to type like our mounts in it and we also enable users to write their own customized our scripts and just included implement so cool app can dynamically load those scripts and run on scripts for you and show you the results you know that's what we got for existing data exchange but still it's not that good that's we have something that is absent so first thing is we kind of want full access to our currently we actually have that our console where you can type in our mounts which work pretty close to a real life console but it doesn't have like a lot of like hints or something that that is not too too easy to use and also when we use like plotting functions they're always like god issues because we are using a third-party our library to do that so if we have full access to our it would be very good to use top of the analysis and applauding packages available on our website and they're calling it Trent and also we don't only want like we want like more applications data not only cytoscape we want to work with other applications as well like igv I mean there are there are like tons of applications because I'm not really a biologic so I am not aware of like most of them but I know there are a lot so the other thing we want is absent is the interactivity so we wanted to create like user-friendly interface to interact with the data set as well as like interactions between different UI components because say you draw like some quality R which is a static plots you want to map some of the notes to comment what you're gonna do you can do it by maybe saving it to a file and read read it back to comment and then highlighting on it but you can't do it like just maybe click on one node on the plot and highlight highlight it on the corner that's something we cannot do we can't do now yeah just that's the same thing we we just talked on not only between chromevox and another application but amount applications that means the communication should be not only from chrome app to Foreman that it can also from one application to the other like non-core map application so here is how we are going to like implement the shiny and chrome app communicate communication in this training app so first of all is chrome app has a set of api's that enable applications to get data from that send data to format and what we wrote recently is our package called coma bar this is absolute just a wrapper a package of the rest restful IP is we we have already so users can call this function C in this package to just a volatile avoid like sending HTTP request so you don't have to write that explicitly also reactive programming is will make it possible to get data from cuomo without manually triggering it currently what we do is like every time you want a data from coolant you have to call something but I will explain later yeah so so first is I mean one way is getting data from Cornette our current solution is like a polling mechanism it gets the data entry like once a while like 0.5 seconds and make it available through reactive so it it's like the code below basic that block of called runs every 500 milliseconds and get the selected nodes from core map and put it into a local variable called select columns or select the rows so this is a the good thing about it the data is constantly available like you can access anytime you want but also it has too much overhead but buddy has too much overhead so we are actually thinking about we might need to replace this with more like passive mode of fetching data not like constantly requesting data it's it should be something similar to like event notifications that either change so we go and grab that interchange after the event but so far so far we have been using this and it works fine but if we incorporate like many more reactive blocks in my cause like our applications to run very slow so the other way is sent there to format back to Coleman so say we want example is sometimes we want her to just as I said we want to make those like data points on the every time we like say we select or brush those data points on on our thoughts we wanted to map them back to on that because you want to so you find something here that is significant you want to see what is in a rocket an increment that's we have we doubted through reactive expression so here the brushed points is a shiny shiny function that grabs the plot which is the second argument called sample brush get the brushed points from this plot and use this as index back to you what you use to draw this plot here is a DMP CX norm saying so you grab those data and so you get maybe those the names of these data points or IDs or something that might be that is available in chrome app as well then since we define it as a reactive value the sample rolls is a reactive expression so we can use it in a reactive function down here called observe invent so the observer in front will observe the value changes in several rows every time every time user brush the plot the sample rows will change which caused the observing event the block of the code under observed invent LeBron which will further set the set sent this data back to Cornett and highlight these notes in chrome app by calling core Maps API so here this lie section shows how reactive values and reactive functions work together so for cytoscape basically it's the same thing because circuit has this restful service as well but we also just for convenience we also wrote this our package called cyr which we wrapped the original HTTP request in it currently we only have like a couple commands because that's the work we only need but we're still working on it and if someone's like interestingly collaborating on it that would be cool yeah so we do need to add more functions like getting Network Energy Information and also like sometimes you want her to get the neighbor nodes of the selecting nodes functions like that so what so after we don't quote my Pisani and shiny cytoscape how how would it work out so it's actually being put together like this so we have mmm basically communication between korma Pisani like both ways and shiny word cytoscape as well so these are too late like communications between those three applications you might wonder oh there is no way there is not a way to communicate between site escape and comment but actually if you go if those two red arrows work then it actually enables the communication between Steiner escape and cro-magnons well say you have what it is said in you I guess it's kind of it's better if I like later show the demo you're gonna figure out how they work together to pass data back and forth in those two apps so the other thing is we made it possible for other applications to just and provide the data to shiny so the so those data would be available in shiny and that means it those data set would be data objects would be available to other applications as well so here you can really see why shiny as shiny acts as a central point like controlling like dispatching operations and giving you like data objects like sending the objects back to different applications and also can aggregate some like analysis results so here we I'm gonna show you a demo of this shiny prototype it's really just a prototype so this demo is about analyzing a microarray data set using our shiny app and cool map and cytoscape so the the raw data is a normalized Samara new data set and we're going to perform their PCA principal component analysis to to identify sample outliers and we we also going to show leave my differential expression analysis and in that we gonna examine raw data related to differentially expressed genes and also we gonna use cytoscape to examine pathways related to the differential express genes so so I made a demo video in like so I can show you so here I open both core map and sat escape so this skip is the one below so inside an escape I included network on over all my network includes mole I mean almost all the genes in human reactant it's about one third genes all the human genes and also on the left side it's all the pathways so first let's import the gene expression data we have the data set we have these days I have has 8,000 genes and ya coming from different three different brain regions l3 the samples are from three different brain regions and also further grouped by group by the gloop-gloop coordinate I receptor over expression yeah that's the term I not really familiar with so the three different regions are CA reaching and dentate gyrus and nucleus accumbens so those things are described in this second file we we are importing I think it's it's pretty ok blurt so here in this table it's actually rows are samples which we Chuck responding to the columns we imported in a in a row Edison in the gene is burning data said so and the each column is a property most and the most important property might be maybe to the brain region property and also also the genotype yeah ok so basically in this whole map application right now it's finishing experiment data with it have to change 8,000 genes on the role site and the samples on the column sign so let's start our shiny app so first it shows a list of the data objects in Cormack on the left side is the data matrix which is this genes relation data matrix second components shows the list of the several property tables all right so if I so basically your actual to the posted up objects together and select analysis and here is a PCA analysis plot it's a PCA differential of not differential sorry it's a PCA ma not that's not the plot yet it's just a PCA plot it's a principal component analysis yeah so it shows so it it's pretty obvious that all the samples are actually mainly grouped by the brain region so we only shows the first two component of the PCA component result which is pc1 & pc2 so those two are mainly basically cited by by the brain region so here we I'm trying to say select the first group here which highlights the different parts like you can see like if I still look at the third one it highlights all these dentate gyrus samples here which is right it's a you know it's supposed to be that region and here we can see we have three outliers so if I select those three outliers which which will highlight the corresponding samples backing core map so it's pretty good for researchers to validate against the raw data set with with the plot with the analysis so if I just look at this you select those two those three you can see they are they are liars in quote map because it's pretty obvious those three strips are different from what they have like around so back here I just chose some different properties to plot that's yeah it doesn't make too much difference but out of curiosity of yours if you select stuff and cool map it won't highlight in shinier is that not true it will it depends if we want to be yeah but we can do it yeah so now let's go to the Lima differential expression analysis so first we need to choose control group since those two breaches on the side all have like some outliers so what we're going to do is to use the dented brain region to do the to do this experiment so I choose to the I chose the noun over overexpression samples as the control group and the lifetime as as the treatment group so here we see the plot so from from the plot we only we might be interesting those very highly so that basically the x-axis is the average expression of each genes so we have a Thomson genes in here so the axis is average gene expression value while while the y axis is lock both change between a control and treatment group so we might want to focus now on like genes that has expression value higher than sex and a lot for change over maybe has a more like 40% more change so in order to in order to like synchronize the chrome app review we need to go to the this tab here and choose this chrome app view so this tab is for listing different of using multiple applications here you can see this one is cider escapes network all over and on fi network which we're going to use later and above is the core map view currently displayed so if we choose that and if we go back to the Lima plot if we select this one here which has a pretty like high change what we can do is go back to the rotted ink war map it's already automatically selected we can invalid Valley evaluative the the the broad a with the analysis here and we can see the control group here and the treatment I don't think you guys can see the two names yeah basically those red ones are treatment group and those darker ones are the control group so pretty obvious it's it's also chewy neurotic so it's pretty convenient for researchers to validate this like on both sides so let's jump into the to this to try to send those the genes to escape here I dislike this whole map view and select this other screen to you and I'm gonna map all this genes that has a higher expression value and also has a high higher change to sign escape and inside escape I'm gonna do those genes already mapped here those yellow dots are genes sent from this journey app and I did the enrichment analysis like cross the pathways on the left side and we choose some are relatively like like pathways that has a relatively high hits Hudgens here we I don't know what pathway it is it might be RNA replication or something so when we took this pathway we can create the pathways Network here with the gene Network here and once we have this view we can go back to choose to choose this view from set escape in a shiny app you know we can see all these six genes that were mapped from shiny or this exchange so researchers can further like maybe evaluate the neighbor genes or go to maybe a stop pathway or like a super pathway or something to further just trying at trying to figure out maybe a hypothesis or something so so it's pretty convenient for them to repeat this process over and over again because now all these three applications have interacted and you don't need to like save something to file and reload it they just need to change something here and map it to the other application and map it back yeah so that's our prototype now it has some issues as you can see it's flashing all the time but I don't yeah we haven't figured out yet but it might be related to a lot of refreshed like those reactive values like constantly refreshing the plants so there I forgot the name but there's actually an application what it does is you fix our package you feed your shiny app into it they physically creates a map like it shows arrows like well that's I had the same problem and I found out why it's doing that because they were oh thanks thanks for the information yeah so our future directions like include something like optimizing the interactivity just as what we were talking about we were talking about like we the app is actually flashing all the time because we might have some issues so we might have too many interactive events we might to want to isolate or trying to use a different way and we want to put different highlights efforts effects for different data sources so like data coming from inside escape and the cool map we want to highlight them differently on the cloud so we can figure out which or which application comes from and also we want users to be able to control individual like data changing directions sometimes they want it might want to disable the synchronization with full map or cider escape yeah we were going to allow them to do that and we wanted to have more applications and we also wanted to add more data pre-processing and analysis functions one other thing is since we want other people to write like plugins to these shiny applications that we wanted to write some code examples and templates for them to fill in their own analysis or put their own applications data into shiny so we can use that data as well yeah I guess yeah so if you want to try chrome at that application on the top right corner you can go to chrome app dock to download it you know if you want to try this shiny prototype you should contact us you know we are still working on it and yeah just shoot me an email @ l KQ at umich.edu yeah thanks any questions maybe that actually requires that this we currently wanted to run locally because we want to get data from pool met because cool net is a desktop application and we might I so like isolate some functions from this as an individual application one day hold it on like a web server or our own web servers or just on our shiny website do you know physics or what version of shiny basically I should be the current one okay so that's easier because I said you could add one yeah so when I started I was using the previous version but did not allow modules so it's just once you make the app then that said you touch anything it breaks but now there as you said like you can put like the data loading has a module yeah our code right now is I would say it's still like a little bit messy but we are trying to yeah to be making it easier for other developers as well you got a slide that showed the different applications and the arrows running between them and then you had things funneling through shiny but then you also had those things communicating with each other don't run them through shiny don't you lose the reactivity you do if if you want to steal to achievement you the solution was actually talked about like in the beginning of my talk it's you have to write every application or plugin or something like that to be able to enable it by lateral communication yeah so structure is something we have been struggling with so we think the color may now all collaborate has a tank biologist so our task able to make their data actually easier and more intuitive for them so they always say I want to work with this program work with this program work with that program so initially like we to support folks on bilateral communication between two apps so we build a function that I could cut under the Union full map to talk to cytosine to talk to RGB but as you can see like when people want to walk and while the more program so base K we need to do the pilot racing for each program so it makes it very complicated and so that's a reason we come to shiny so we hope shiny can be slower as a kind of a network switch bot so can control order come communication and make everything more straightforward that's actually something in our lab we did something similar but for the web development so we had this problem that we needed some kind of ID formula it allowed to take a third-party application plug it in in a bunch of them didn't come like a poor platform module so and then insertion was just mentioning kind in the board room or those portal arity really helps because what you can do what we did this be implemented that automated fencing so you take an app plug it in for what the what the platform does it traverses the interface mine's all the possible methods you can call from that library okay automatically creates a pool of callbacks for it and so let's go I mean you do it for the second application as well now you have two pools of callbacks and now you're just map called beach footfalls beach I will say that's even cooler because you can discover those services basically and you have callbacks so we implemented that as a messaging service we have like a mediator pattern that does like some kind of communication so each module that is arriving application is able to send messages and then whoever's listening they accept respond of platform or programming languages you can see is reduced for web all web but comes concept is the same we just published a paper on that on that form architectures we published okay is it fine if I can have your email address so I can talk to you about that as well okay because I kind of curious about that yeah thanks [Music]