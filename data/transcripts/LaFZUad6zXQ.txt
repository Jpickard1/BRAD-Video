okay hey everybody we are back with the second in our two-part series of intro to r programming in preparation for bioinformatics 527 for fall 2020 and uh today we're going to be talking about some more complex data structures we will also get into what packages are in the our programming world and how we can take advantage of them and we will do some fun things like we'll make a heat map today so uh yeah so let's get into it and all right so let's do a little recap remind ourselves what we went over last time we were talking about um well a couple of key points actually and they're both sort of epitomized by these quotes from john chambers so what john chambers says about the our program language is that everything that exists is an object and everything that happens is a function call and so that's good news because we learned how to create objects in our last time using this assignment operator so we've got the assignment operator here which is sort of this hacky arrow and if we put an expression on the right side of this arrow we can store the results of that expression into a new object that's named virtually anything we want it to be named and then we can we can carry that information around in that object for further use uh we also learn the general syntax for calling functions in r so not only can we create objects so everything that exists as an object we can create those objects we know how we also learned the syntax for calling functions so we can create objects and we can call functions and the way we call a function in r is to use the function name and then inside of parentheses uh we just feed that function the arguments or the pieces of information that it's going to need to do its job we also learned about data types last time so data types are this extremely important concept in r all objects in r contain data of a particular type and a data type describes what kind of data an object holds so examples of data types that an object may hold we're numeric you know that one's pretty straightforward character which you're familiar with um and the key here is anything inside of quotes even something that looks like it's numeric will be considered character by r and then we've also got a data type called logical and the logical data type con is uh completely made up of the values true and false and then finally we have the factor data type and factor data types are really useful for doing grouped and subgroup analyses they allow us to group all of our samples based on a condition like tumor versus normal treated untreated and so forth okay so in addition to data types there's another really important concept in our programming in general and that is data structures so all of our objects are going to contain data of a particular type and all of our objects are going to have a particular structure and when it comes to r there's these four sort of most common data structures the vector the list the matrix and the data frame and we heard about vectors last time they are very straightforward data structure they're one dimensional and they contain a single data type so we looked at numeric vectors and character vectors and they contain you know one data type which is indicated by the color here being all blue every element of this vector has the same data type and then today we're going to get more into data frames so we're going to be talking about data frames and how those are different from vectors and we looked we looked at how we can work with vectors so we saw how to create vectors so we had we got some experience uh with really our first function that we spent a lot of time with which is the c function which stands for combine or concatenate and it lets us you know smash things together into a vector basically and so we can say c of one and then using the colon operator all the values from one to five inclusive and we can put that into a vector uh we could create another vector with the c function anything we want and we could we created these these numeric vectors and we saw how we can use arithmetic operators on those and we got to see how vectorization works and we we sort of got an appreciation hopefully for how that can be a useful um uh characteristic of the r programming language we made some character vectors as well we saw that you can't really do math with character vectors which is you know the first example that i wanted to show of how you really have to know what type of data you're working with um and and you know what that data type uh how it works with different functions and we you know ran into some useful functions like paste uh which allowed us to make all these labels in one line of code uh very simply all right so let's get into some new material so for today that material is going to revolve around the data frame so vectors are those one-dimensional data structures data frames are two-dimensional data structures and importantly data frames can hold multiple data types so a data frame is actually made up of vectors so in order to create a data frame you need vectors that are all of the same length and you can put those same length vectors together into a structure called a data frame so by putting together vectors that are of the same length uh together in a data structure you get this rectangular data structure called the data frame and it can contain different data types so that's shown here by the different colors so you could have a data frame where one of the vectors which makes up a column of the data frame is numeric another vector that makes up the second column might be data of type character and the third column might have be made up from a vector of type logical and we looked at a data frame we didn't really talk about it as being a data frame at the time but the iris data set was appeared in our our environment we brought it into our r environment and it is a object and it is a data frame object and so the iris data frame has five columns and this is uh what it looked like and we can see that there are four columns that contain numeric data and then the fifth column actually contains data of type factor and data frames as you would imagine i'm sure you recognize them are really the most common way in which we're going to encounter data as research scientists you know it's basically a spreadsheet right and so we're going to work with data frames all the time and with that in mind it's important to know some terminology when it comes to data frames so you know you'll hear people refer to columns and rows of a data frame but just so you're aware people will also refer to a column of a data frame as a variable just like they will often times refer to it generally an object in r as a variable so it's just it's a little bit of terminology to get used to and the the lines there get a little gray sometimes with the way that people use it um but just get used to that you know if you hear someone referring to a variable of a data frame they're referring to one of the columns uh and likewise they may instead of calling a row of a data frame they may be referring to them as observations so a data frame will have variables and observations or columns and rows uh objects in r also have attributes uh so uh attributes are something that is beyond the data itself that the object holds it's it's you could think of it as metadata or information about the data that is not the data itself uh and when we're talking about data frames attributes for data frames so we'll have the data here and then attributes of the data frame of this of this structure are for example column names so they aren't the data itself but they describe what's held inside the data frame and another attribute an example of an attribute for a data frame are the row names so again not the data but part of what describes that data and so let's go and let's get our studio going so let's get that fired up instead of me just talking let's do some writing some code and let's see i gotta go get our open so i'm going to launch our studio we're going to use our handy dandy ide to do all of our our programming and whenever we open up a session of our studio again that first thing we're always going to want to do is go to session set working directory and choose directory and just like last time i'm going to go to uh where i'm storing those two files that we're going to be using and we'll make more use of those today the alzheimer's.csv and the rep1.txt files and then once we find that directory or that file in your file system architecture you just want to hit open and the code for accomplishing that setting your working directory is actually accomplished through a function called set wd so we could have typed all that out and this is just uh the location in your in my personal file system where that directory is uh you know as we did last time we could always say list dot files and take a look at what's in there you know for you importantly what you should have are alzheimer's and rep one dot text all right so once we've got our um our working directory set then we're going to grab a script so we really don't want to be writing code down just in the console because we can't keep it it will just disappear so we want to go to file new file and we're always going to grab a new r script and just like last time we're going to bring the iris data frame which is sort of it's called a built-in data frame it's always available to us we just have to call on it basically and r has a bunch of these and they're useful just to play around with if you're learning new functions um or want to just test out a new function on a data set that you're really familiar with and so this the iris data set and others can be really useful and so we'll just run that line now we've got iris in our environment and let's try this new function attributes and we'll call it on the iris data frame and what do we get from that so we see that we can now when we call attributes and we feed an object so the attributes need some object as its argument and when we feed it the iris data frame it's going to go and show us not the data itself but what are the attributes for that object and in this case we've got a data frame so it's telling us the column names uh the class of this object which is data frame and then all the row names so that's how we can get to the attributes of an object so something to be aware of that in addition to the data and what the object is holding itself it will also have something called attributes okay so how do we create data frames we know how to create vectors we got comfortable with that last time the way we create a data frame is you know we need a collection of vectors that are all of the same length uh they can be of multiple data types and then we just use a function that's appropriately named data.frame and we can use that to put all of those vectors together whatever they are into a new data frame and so in this case we're going to use paste 0 which i think we saw last time maybe not it's a it's a variant of the paste function that's just going to smash this character data together with these values and create a new vector uh we'll grab the numbers from 101 to 110 and then we'll grab 10 random normal values so let's go ahead and do that so for the a vector we're going to say paste 0 and we're going to paste sample onto the values one to ten so let's run that and then we'll take a look at a and see what's stored in there and indeed there we can see sample one sample two sample three and so on uh for b we're just going to grab the numbers 101 210 and you can see that you don't even need the c function when you're working with numeric data and you just want a series of whole numbers if you just say the first and the last value and separate them by the colon operator it will know that you want to grab all of those values as a vector and so we can run that and we can take a look at what's in that object and there they are and then the last thing we'll do is we'll use that our norm function and it just needs an uh the only argument we need to feed it is how many random values we want from the normal distribution and so we're going to ask for 10 of those and we'll see which numbers i got you should get different values because it is random okay so now we've got three vectors that are all of the same length and so we could create a data frame now so we could say mydf and we just call that data.frame function and we feed it the arguments that it's going to need are what are the vectors so if we're creating a data frame we know we need to feed it vectors in this case we've got this a b and c and we'll run that and then we can take a look at what is stored in my df and there we go so now we have a data frame that we just created um from scratch and so that's how you go ahead and manually create a data frames from some vectors there's our data frame but that's not really how we're usually going to be getting uh data frames into our environment it's not often that we're going to manually create a data frame it's usually going to be data that either we've generated in the lab that we've gotten from some core facility or that we're grabbing from a public database maybe downloading from someone else's publication regardless it's always going to be a file that's either housed locally or that we're getting from a database you know or grabbing from somewhere on the internet so so how do we do that and you know because that's really how we're typically going to be bringing data frames uh into our r environment so let's look at how we do that and the way we're going to accomplish that is through a very useful function a function that we use all the time called read.table okay and read.table allows us to read local data sets from a file into our r environment and so there are three arguments that we have to feed to read.table in order for it to do its job the first is a an argument called file so it needs to know the name of the file that we want to bring into our environment the second argument is going to be the header argument so we need to tell read.table is the first row of this data set column names so that would mean that it does have a header if that's true we would we would enter the true uh the logical data true if there isn't if there are no column uh names if the first row was just data then we would say header equals false and then finally we need to tell read.table what is the separator so how does it know where one column or variable begins and ends in this data set and so we you know if we have a comma separated uh data set that we're trying to read in we would just say that the sep equals the comma so read.table is a great function because it's really flexible uh you know you can read in a data sets that are delimited in any way so tab comma space something more exotic as long as you can figure out what the separator is you can read it in using read.table read.table has many possible arguments but typically the only things we need to feed it to get what we want are these three arguments here so file header and sep and now that we're getting more comfortable running functions um i wanted to mention that they're that you can import data in a couple of different ways so i've actually got another typo here that i'm that i'm realizing oh no i don't okay sorry so i take that back so here we're just we're just going to be reading in cell cycle rep 1 which is the rep 1. text file and alzheimer's using read.table right so we'll get to what i was thinking of in a minute so let's go ahead and do that so we're just going to go we're going to have to create this new object called cell cycle rep 1 and we will use read.table and the first argument is going to be the file argument which in this case is rep1.text it indeed does have a header and in this case it's a tab delimited file so we're going to use the backslash t as the separator which in r that just is how you indicate a tab and so that's our separator and we'll do something very similar for the alzheimer's data set except this is a csv file which means in this case our separator is going to be the comma so so let's go ahead and do that let's go grab these two data sets and bring them into our environment so i believe we're calling that first one cell cycle rep one and then we're just going to make a call to read.table and we're gonna say file equals rep1.text header equals true in this case and our set is going to be backslash t and if we run that line of code voila there is our data frame that we've now brought in from a local file located on our computer and we can do the same thing for alzheimer's with a call to read.table in this case we'll be saying file equals alzheimer's our header it is true it does have one and then our sep in this case is the comma okay and there's the alzheimer's data frame there it is we just brought it into our environment so now we can actually do something with this data analyze it using all of the power and functionality of our programming and so you know it might seem kind of annoying that you've got to write that code which might seem like a lot in order to just read in a file uh you know we're used to just clicking on things to open them up uh but i just want you to keep in mind that this gives you programmatic access to data files so uh you know if you're just run opening one file yeah it's fine to like go and double click on something but what if you're opening 100 different files and you want to put them all into one data set you know you're not going to want to do that manually and being able to programmatically read files in knowing how to combine things which you've already seen a function that does that for making vectors uh and there are ways to do that with data frames this gives you you know puts a lot of power at your fingertips so just keep that in mind and really calling read.table is actually quite straightforward once you get used to it i want to mention that you can also read data in directly from the internet if you have a link to a data set uh so this is just an example of doing that uh and instead of feeding uh the file argument uh the name of a file located uh in your working directory you're actually gonna feed it uh the link to that data set so um so we can go ahead and just i'll show you how you would do that so here's here's a link to a bunch of different data sets and if we go here eventually maybe maybe we won't be able to get there today all right try that one more time all right well we'll skip that for today uh if you go to this website typically i must have been having a connection issue there's a bunch of data sets you just right click on any of them to get a link to that data set and you can read them in right from the internet so you can go ahead and grab any data set there that's available in that database all right so you know again we're getting more used to calling functions so another really useful thing uh to know about functions is that you can always get help on a function so the way we get help in r on a function is by typing the command question mark and then the name of that function so let's go ahead and just look at what we get from question mark read.table i'll run that okay and so here we can see down in the in the lower right panel and the rstudio interface uh that we've got all the information we sort of would ever want to know to get started with read.table so we've got uh that you know it actually tells us where it comes from which we'll talk about this in a few minutes and then it describes what this function does and then it's going to tell us what are all the arguments that are possible for read.table and then if we scroll down it's going to actually for each of those arguments it's going to tell us exactly what those arguments are and what the function is expecting when we enter information for those arguments so let's jump back here and so let's look at this so there's actually a lot of information here and it may be a little overwhelming because it's kind of a wall of text but the key thing to know is when you're looking at a function and you're looking at the help documentation which is what we're looking at here and we're looking at the arguments that there are two types of arguments for a function one are required arguments the other type is optional arguments and so required arguments are going to have no default value so these are arguments where the function needs you to provide some information or you will get an error it will not run the optional arguments all and you know so file is an example of a default or i'm sorry of an argument that's required it's got no default if you don't tell it what file you want to read in there's no way for this function to know what file you want however header if you don't give it any information there's a default value so it will assume that the header information is false if you tell it nothing and so that's an example of an optional argument and so you can see there's a ton of optional arguments here that will let you modify how read.table works in a lot of potentially interesting and useful ways you know but as i mentioned before in many cases you know we're only going to need this required argument and then we typically want to tell it whether or not there's a header and you know the separator because if we don't tell it anything it's going to assume that the separator is is the empty uh is an empty character an example you know this is here's an interesting argument here you might have a data set where the first say 10 rows are some text describing the data set so maybe when you're reading that particular data set in you're going to need to take advantage of the skip argument where you're going to want to skip those first 10 rows of text in order to get to your header or your first row of the actual data set and so that is just an introduction to required and optional arguments using taking a look at read.table okay this is what i was thinking of previously so another thing about calling functions is you can be very explicit about how you feed in your argument so you could say read.table file equals rep1.text header equals true sep equals tab or more of a shorthand way to do it and you'll see people writing their code like this a lot they will actually omit the the argument names and if you just feed the argument uh the values into a function in order the function will assume that that's what you mean so if you know if you don't name the first piece of information you give it will say okay i'm assuming that this is for file because file is the first argument of that function and the same is true for the header you know you i didn't say that the header was true here but since it was the second piece of information i provided and header is the second argument for this function then it just assumes that's what i mean so these two lines of code are absolutely equivalent and if you run them you'll see you get the same result in both cases you will bring in rep1.text into your environment from your working directory i really like writing code like this in most cases just to be explicit uh and so you and anybody reading your code knows exactly what you were doing but you run into this a lot and i fall into this habit and you will too in some cases you just get really used to a function and you'll stop writing out the arguments in that way okay so now we know we know how to create objects call functions uh we can bring data into our environment uh from our local file system we can grab stuff from a database if we have a link to it uh the next big concept in r that we're going to want to work on is subsetting so now that we can bring data sets into our environment first thing we often want to do is to subset or slice and dice these data sets and the reason for that is we might want to just do a focused analysis on particular slices of that data we might want to break it up into multiple data sets i mean there's just it's something we're just always going to want to be doing uh with our data frames it's um that will become clear as you work with data in our and there's a lot of different ways to do this so um so we're going to get started with with one way today and one of the more uh common ways to accomplish this and so let's take a step back and let's start subsetting uh not with data frames at first but let's just do some subsetting with vector so that's a a simpler data structure so it's a good place to start and the way that we we actually can subset vectors in r is the u through the use of something called square bracket notation so we use these square brackets and that will allow us to subset a vector uh and i i do want to mention that it this does tend to be a source of confusion for new users as we go on but hopefully we'll take it sort of step by step here and hopefully it'll make sense uh but it can be like a the first place where people will stumble a little bit you might have to do a little practicing to sort of ingrain this um and so how does this work so square bracket notation looks like this if you've got a vector you would name that vector and then inside of square brackets you would just say what elements you want to extract from that vector and so what do i mean by that well here's a here's a numeric vector that's just sampling the values 1 to 110 times so here are the values that came out of that line of code and we can say i want from that vector inside of square brackets if i just want the sixth element i can just put the number six and so r is gonna know that that's what i want so it's gonna go one two three four five six it's going to grab the sixth element from that vector and that's what it's going to give back to me similarly i can say i want the first three elements of that vector and it'll grab the first three if i wanted say the first the third and the fifth well i can feed a vector of those values by creating that vector with the c function and saying okay i want the first the third and the fifth element and it will do that you can also use negative values so you could say i want everything except the 10th element of that vector and so this that's what negative 10 would mean in this case so let's go and we can just do that together so let's do my numeric vector and we'll call the sample function and we're going to sample the values 1 to 100 10 times we'll run that let's see what we got this time all right there's the values that i got this time and so now let's imagine that this vector is something uh interesting and we want to subset it in some interesting way and so we can just grab you know the sixth element and there it is in this case it's 54. we could go back up and say i want the first through third element and there they are if we want the first the third and the fifth we've got to feed it a vector of those values and there's the first the third and the fifth and we could also grab everything except the tenth value and we'll get everything but the last one there okay so that's square bracket notation and how we can use it to subset vectors so most of the time we're not going to be typing in numbers into square brackets in order to do subsetting we're actually going to be taking advantage of the logical operators that we introduced last time and so you know how does that work so if we have a numeric vector like this one here we can use a logical operator and get some information about that vector so we let's say we're interested only in the values of the elements of this vector that are greater than 50. so using this logical operator we will get back a logical vector so now this is a vector with data of type logical and it's telling us wherever it says true that means that this vector contained a value at that element that was indeed greater than 50. so the first two cases it's true the third case it's 13 false the fourth case just missed but that's false the fifth there we go over 50 and that's true and so on and so we can take advantage of these logical operators in order to subset our the objects that we're working with in interesting ways ways that are useful for us and so let's take a look at that so you know we can do something like like we just looked at and if we look at just what the result of that is there's that logical data all in a vector and so you know we could call that okay so now we have all of that logical data inside of that vector and so we can actually use that information for subsetting and so this is where some people get tripped up when they're just starting out but i can say new my numeric vector and now inside of square brackets instead of typing numbers i can use that logical information contained within that vector to tell square brackets which elements i want and it's going to take any element that has a value of true in the logical vector so it's going to go through and just grab um all of those instances so and i call that my logical vector so i can actually use that for subsetting now and there they are there are all the values that are greater than 50 from that numeric vector all right so like vectors we can subset a data frame using square brackets uh and so as you can imagine you've got to give it two pieces of information now so with a vector you just need to know which elements you want with a data frame it's we need to tell it which rows and which columns because we've got a two dimensional uh data structure here so i think that makes sense so just like we can with vectors we'll say alzheimer's and then inside of square brackets the first piece of information is always going to be the rows that we want and that second piece of information is going to be the column so we'll just say in this case i want the first 10 rows and the first five columns and so let's go do that see how that looks so there's alzheimer's and we'll say first 10 rows and the first five columns all right there it is we've just subset subset it out from the whole alzheimer's data set which has 333 rows or observations and 132 columns or variables and we have pulled out you know just those first 10 rows and the first five columns and we could do uh you know an analysis just on that slice of the data frame okay another thing to know about square bracket notation now that we're talking about data frames is that if you tell square brackets nothing it will assume you want everything so in this case we're saying from cell cycle rep one we've got the first three rows we're asking for and then i put a comma and i didn't provide any more information and that's just shorthand telling r hey i want all the columns i'm not going to bother to to give you that information so if you say nothing it will just give you everything so if we say cell cycle rep one first three rows no information there's we get all five columns back from that data frame in addition to the first three rows okay so another way to subset data that's going to be useful in combination with square brackets is something called dollar sign notation and dollar sign notation allows us to access specific columns of a data frame and so you know we could access specific columns using square brackets but there's a nice shorthand and it's going to come in handy as i think you'll see and that is this dollar sign notation and so once you have a data frame in your environment you can type the name of that data frame and then the dollar sign symbol and then uh the name of the column that you want to extract from that data frame so you can access any column any variable of a data frame by using this dollar sign notation so we can say name of data frame and then this you can you can save this as value of and then the column name and so in this case with this line of code we're saying from the alzheimer's data frame i want all of the age values i want that age column out and so let's go do that and one thing to notice as soon as i put dollar sign there now i've got rstudio is really helpful it's actually allowing me to just toggle through all the possible columns uh in this data frame so i can pick out which exactly one i want you know as you start typing more letters it's gonna just start getting rid of possibilities based on what you're typing and so with v it's got everything that starts with v or maybe it contains a v and so uh you know very useful it makes it you can do a lot of tab completing taking advantage of that functionality in this case i think we said we wanted age and so we can just run that and there's all the age values i just grabbed that entire column right out of the alzheimer's data frame and so why is that really useful well so we're going to kind of put everything together here we're going to do some subsetting taking advantage of dollar sign notation and logical operators all at once so so we can go ahead and we can access that age column from the alzheimer's data frame and we can combine that with the logical operator and say i want to know which rows of the alzheimer's data frame have an age value of greater than 85 and this line of code will give us back that logical data telling us that information which rows have values greater than 85 in the age column and so this is really really useful information because we can use that then to subset this data frame and grab out just the rows where the observation has a value for the age of over 85 and that we know in this case we could imagine studying late onset alzheimer's i only want patients who are 85 or older and so let's go take a look at that so we can just say type it again alzheimer's value of age greater than 85. and there we go there's all the logical data that we need to to extract that just those rows from a data frame and so how would we actually do that we would just put it inside of square bracket notation so here what i'm saying is i want from the alzheimer's data frame so i want to use square brackets i want to subset something and what i want to subset out are all the rows where the age is greater than 85 and so this expression here contains that information in the form of logical data and then of course we have to give it some columns you know or we could just say nothing in this case i'm saying i want all the the first five columns all right so let's see how that would look so i'm going to say from alzheimer's i could type i want all the rows or the value of age is greater than 85 and for the columns i just want one to five and there's that data frame so now we've pulled out just that subset of the data okay we of course could so uh we could store that as something so we could call that late onset or something like that and if we run that that's going to now create a new object in our environment that contains just those rows where the age is over 85 and you can look and see that indeed all of the age values in that data frame are over 85 okay and then things you know you can get really fancy so you can start chaining logical operations together so you can say so and to do this we use the and operator or the or operator which is just this uh this vertical bar here uh and so you know what would that look like well here in this expression i'm saying from the alzheimer's data frame i want every row where the age is greater than 85 and the value for gender is equivalent to so these two equal signs is equivalent to the the character data male and i want the first five columns so we could just go back and and modify that original set of uh that original expression we had and we could say i also want another condition uh where gender is equal to mail oops having some internet issues here so sorry about that so i couldn't access that site previously all right oh great i got an error and that's that's wonderful because here's a really common error i used equal instead of the double equal sign for equivalent to so equal you know we weren't trying equal would be like if we were feeding um uh information via an argument we would say like file equals and that's not what we're doing here we're asking for an equivalency we're saying i want of the value of gender to be equivalent to male so you just have to kind of change how you think about the equal sign a little bit um and and then of course you'll just forget like i just did and so now if we rerun that code now we've got this late onset uh data frame and there we go all of the values for gender now are male so you know of course we would change that to something like male only or something and create that okay to be descriptive all right and then here's an example of using the or operator so in this case you're getting anywhere where it's greater than 85 or less than 70. so you can basically get rid of anything in between 70 and 85 you know you can imagine reasons for wanting to do that all right so let's jump into an exercise so we're going to use that cell cycle data set the data frame that we have in our environment and so imagine that you're interested in genes that are regulating the g2m cell cycle transition so create a new data frame that contains only the observations from that data frame where cell cycle rep one the g2m value is over 40. okay and here's just a reminder of the syntax for getting that logical data that you can use with subsetting and then for part two of this when a gene that regulates g2m is inactivated it often results in replication errors uh and that information is held in the x4n plus column of that data frame and so try to create a new data frame that contains only the observations from cell cycle ref1 where g2m is greater than 40 and the x4n plus value is greater than 9. so just get some practice with square bracket notation uh and using these logical expressions and dollar sign notation and chaining them together uh all by practicing uh trying this exercise so take a minute pause it give it a shot and then and then we'll come back okay so here's the answer to the first part so when in order to do this we might create a new object called g2m phenotype and we would say from our cell cycle rep one data frame we want a subset so we're going to use our square brackets in this case and then which rows do we want well in this case we want all the rows where cell cycle rep one the value of g2m is greater than 40. and we'll just grab all the columns so i'm not going to tell the square brackets anything about those columns so you know that would look something like this i think we're calling g2m phenotype and we'll just say cell cycle rep one and which rows do i want well i want all the rows where g2m is greater than 40. and i want all the columns so i'm not going to say anything and then we can look at g2m phenotype and we could see that indeed all of these values are greater than 40. and we can chain onto that so we can say all right i also want to put another condition i want them to have a g2m greater than 40 and an x4n plus value of greater than nine uh and so we can do that by just using the and operator and then chaining on another logical expression here and in this case instead of putting all of this information it's a bit of a long line of code i'm storing it as its own object and then i'm using that object and putting that inside of square brackets so you know you could have put all of this inside of square brackets but it starts to get messy hard to see what's going on and so just for more readable code i think in this case it would be good to separate that to those two lines of code out into their own individual lines of code okay so that's you know we know how to create objects we know what some of these common and useful data structures are we can do some slicing and dicing with square bracket notation the next big topic that i want to get into is the topic of packages in r and so what are packages in r so they package in r is something that extends the functionality of r beyond what is available in the base installation and what packages actually are are really just collections of functions where all of those functions are centered around a similar topic or a theme excuse me so um you know you're going to get a bunch of functions all related to something in a package in our and it might also include something like some documentation you might get some sample data uh sometimes there's even a tutorial that goes along with it and so packages in r are the fundamental unit of shareable code and so you can imagine someone is out there in the r world and they're creating their own functions and all of those functions are centered around making beautiful heat maps and after a while this individual thinks to themselves you know these are really useful functions i would like to share this with the community and that's going to get really annoying and they will take those functions and they will package them up into an r package so they'll put all those functions into an r package they might put some help documentation and maybe some sample data and they will then share that with the art community and make it accessible to everyone and so good news is we've already been working with packages and we just weren't realizing it so whenever you start up a session of our studio and the r programming language you are automatically getting the base package loaded uh for your use into your environment and so these functions are automatically available to you and they're going to be a bunch of core functions that are things that are really just everybody's going to want so things like arithmetic operations things like the c function setting your working directory a function called grep that we haven't talked about but these functions are automatically going to be available to you in your environment as soon as you start up r and r studio and here's a somewhere where you can go to take a look at some of the most common functions of that i think everything from the base package you can find there uh other packages that are automatically loaded when you fire up r and r studio are the graphics package so we've worked with that plot function last time that's automatically available things like read.table uh things like uh and then that's coming from the utils or utilities package we get things from the stats package which is automatically loaded like our norm which we've been working with other uh statistical tests uh and useful statistical functionality all come from that stats package and whenever we're working with a function as we saw earlier if we call question mark on a function the first piece of information we'll get is actually what package that function comes from so we could do something like read.table for example so let's go and now we'll see down here read.table is in the utils package okay and you know we can we can do like the example in the slide and say for crap and grep comes from the base package okay so that's just that first piece of information that you'll hear or see about your the function that you're asking for help on and thanks to our studio we can always just click on the packages tab and get a look at which packages are available and currently loaded in our our session so if we go to packages any package that has a check mark has already been loaded into our environment and is available for us to use okay so that's one way we can get a look at that you can also to you can run the command session info and it'll give you uh some other information as well as what packages are currently loaded in your our environment okay so that's the packages that are automatically loaded but what we're really interested in uh is all of the other r packages that are available to us so the community of our users is constantly developing new packages for everyone else to use and making them available for everyone it's really one of the strengths of the r programming language many of these packages are housed in a central repository known as the comprehensive r archive network or crayon there are tons of packages available through crayon it's last at last i looked it was over 16 000 who knows where it's at now uh and and you should know that cran hosts publication quality code so it's not a development platform for a package to get and to cran it's got to have met minimal coding standards uh and so it's not it's going to be something that works right out of the box so you know it goes through a lot of checks and balances so that when users get packages from cran they know they can rely on them and that and know that they're going to work and the other thing is that they have to be non-trivial so they have to be something new that's gonna that could feasibly help out other members of the community and so you can think of cran as really a giant warehouse that stores all of these useful r packages and we as our users can just go and grab any one of those our packages bring it into our environment and start using those useful functions that other people have written and and keeps us from having to write our own functions every time we want to do something new so just about any topic you can think of and many would never imagine have dedicated packages available in crayon so these are just the first 20 packages alphabetically that are available in crayon that i that i grabbed and you can see the first one is useful tools for geometrical analysis used by the brazilian gerometrics association no idea what gerametrics is but there is a package that the brazilian gerametrics association has developed and there are useful tools for it apparently uh here's the one that's a little more relevant to us in the biomedical community uh the a package that's improved false positive control of gene permuting gsea with absolute filtering so gene said enrichment analysis is something that we often do in the biomedical community and in bioinformatics and this is a package that's going to help us control for false positives when we're doing that sort of analysis so that could be really useful here's three not one but three packages that will help us analyze accelerometer data no idea what an accelerometer is but there are three different packages for working with that data and then my favorite one is the acme r package which implements acme estimator of bird and bat mortality by wind turbines so i had no idea that was a thing but apparently it is and there's a package available in crayon that will help you implement an acme estimator of that so just to illustrate this point that anything and just about everything you can imagine there are packages available in crayon that will help you to do whatever data analysis you are working on okay so that's great so how do we get access to all of these r packages so once you find an r package that you're interested in you can install any package from cran by using the function install dot packages uh and so we just uh we'll just need to say install.packages and then the name of the package that we want to install from crayon and so it's pretty it's extremely straightforward and another wonderful thing about r it's just super easy to grab these r packages and so let's do that so let's grab what's a really useful package from the crayon known as p heat map or pretty heat map and so we can just say install.packages and then we can feed it the argument which is the name of the package that we want to grab and it's going to be pe map in this case so installed packages let's do that together oops and we can run that and of course i don't have a connection right now which i keep forgetting uh fortunately i have p heat map installed already so you can see it here okay so you're gonna go through the installation and what you're gonna see is that it's gonna go and connect to cran and it's gonna download p heat map and it's going to tell you where it downloaded it which is not any information that you really need to be aware of and so that allows you now you've grabbed all of the information in the p heat map package and brought it into your uh what's known as your library and so that's great and it's the first step but there's one more step we have to go through in order to actually get at the functions in the p heat map package and so once we get something into our library in order to load the functions from that package into our current session we actually have to call the library function on that package okay and so why is that so well you know if you're just starting with r you're not going to have very many packages that you've got in your library but in my case you know and i recently updated r so i don't actually have that many but there are there is a decent amount there and whenever you fire up our studio uh a new session of r you don't want all of those packages to be loaded into your environment that could start eating away at your memory so what r has you do is it has you tell it when you want to use the functions from a particular package and the way you do that is with the library function so we know we want to generate a heat map and so we would say once we've installed it and you don't have to install it every time once you install it once it'll be there the next time you open up rstudio and so you can just say now i know i want to be using some of these functions from p heat map so i'm going to i'm going to get this and load it from my library with the library function okay and so now we can see the check box next to b heat map so it's actually been loaded into our environment and we can take a look so the the the actually pe map's unusual that there's only one function in this package and it's called pe map imagine that and so we can get a look at how that function works with question mark and we can see you know it comes from the p heat map package uh you know this is kind of generally what it does a little more descriptive of what it does and then here's all the possible arguments for the p heat map function but what we can see is that the only required argument is this first one everything else is going to have a default value and so in order to use p heat map the only thing we have to provide is the mat information and so what is that so if we scroll down here's a description of each argument and the matte argument is actually it says it needs a numeric matrix of values that we want to plot okay and so that's bringing up a matrix so what is a matrix so we know we need a matrix and we've talked about vectors and we've talked about data frames so matrix is a pretty simple concept relevant to those in that a matrix is a two-dimensional rectangular data structure just like a data frame it's made up of vectors that are all of the same length but in the case of a matrix they have to all be the same data type so as indicated by the color here so you know typically we'll be working with numeric matrices and so a numeric matrix will have the it'll be made up of vectors that are all of the same length and they all contain data of type numeric okay so that's what the p heat map function is expecting for that required argument map and so how can we create a matrix that we want to get plotted with p heat map and so we're going to be trying to make a heat map from our cell cycle rep one data and so how can we create a matrix from that so let's let's go and take a look and here's a new function that's pretty useful and we can we're going to call it it's called this str which is short for structure and so anytime you have a data frame you can call str on it and it's going to give you back some useful information about that data frame so it's going to tell you how many rows how many columns you have it's going to tell you for each of those variables each of those columns in your data frame what's the data type and so you we can see that the first column is this fbgn column a fly based gene name so this is actually data from the model system drosophila and it's got uh what's new what are these fbgns and so that's data of type character in this case uh and then we've got four columns that are all data of type numeric and so we could create a vector excuse me a matrix from this data frame by subsetting so if we could just subset out these four columns they're all numeric that would actually create a numeric matrix and we know how to do that so we can say cell cycle rep1 and in this case we're going to say i want all the rows so i'm not going to give it any row information but the columns that i want i don't want that first one because that's character data but i do want the rest so i'll say two through five and so we can see we just run that that gives us a numeric matrix it's it's equal length vectors all of numeric data and so we can we can store that as let's call that cell cycle rep one matrix so here's this new object and it's a matrix okay and so now we can actually feed that into our p heat map function and so if we go ahead and do that we can say p heat map and then the only required argument is the mat where it needs this matrix that we want to that we want to actually plot and we'll say the heat map and we're going to plot that matrix and if we run that there's our heat map okay and we'll be talking about heat maps a lot this semester and so we can see you know here are the data and they've all been clustered and we can look for patterns and trends uh heat maps are extremely useful in some a way that we will analyze lots and lots of data sets uh in in bioinformatics okay and so that's just an example of you know grabbing a useful r package from cram super easy just use install.packages load it into our environment with library use the question mark to learn about one of the functions from that package and then actually do some subsetting so that we can feed the proper information into that particular function okay and so the last thing i want to do is get you guys started with another package from crayon called swirl so let's go and install this package so i won't be able to right now but go ahead and install call install.packages and grab the the swirl r package from crayon and it'll again it'll go and make a connection with with um with crayon and it'll download that and then you're going to call library so now you're going to load the swirl r package into your environment and what swirl does is it's actually a package for r that lets you learn about r right in the console so right as you're working in our inside of our studio it will take you through some tutorials and i think they're really good so i'm just offering this up as another way to get comfortable with our programming for those of you who are just getting started and so once you call library on swirl it's going to say hey and then it's going to say type swirl when you're ready to begin so then you're just going to do that and then it'll say welcome and it'll say what should i call you and i just for me i said sd guest it'll say okay that's your cue to press enter to continue so then you'll hit enter and then it's going to ask you to select one two or three and press enter and it won't matter what you select and then it's going to give you all these little more information about swirl and things you can do inside of it that you know you should take a minute and read those and then it'll say let's get started and then you're going to be given options of what course what tutorials you want to look at and so for us we're going to be interested in number one so our programming the basics of basics of our programming so you'll make selection one and then we're gonna go and we're gonna say that we want to it's gonna say please choose a course and we'll take we're gonna choose our programming so again number one and then it's going to give you finally a bunch of options and so i would recommend you know in order to reinforce everything that we've talked about in these first two sessions is work your way through lessons one through eight i wouldn't go beyond eight for this class i mean if you want to absolutely you know feel free but i think what's really relevant uh to 527 is going to be the the the tutorials that are in lessons one through eight and so you'll see how you work through those it's going to guide you step by step and it'll just give you more practice in addition to the other materials that i mentioned in my welcome message and these two um these two videos that i'm recording and then you layer on this the swirl tutorials you know i just want to give you guys options to practice r get comfortable with r as much as possible and to whatever level you want to do that of course there's always a lot of information and courses available online that you could use to supplement as well um you know there's just a ton of great material out there so hopefully this is helpful uh and i think if you get comfortable with all the topics that i've mentioned here uh and that are available in the other resources that i've mentioned that you'll be uh more than ready for 527 for this fall so let me know if you guys have any questions thanks